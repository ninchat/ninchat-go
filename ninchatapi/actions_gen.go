package ninchatapi

// THIS FILE IS AUTO-GENERATED BY generate.py - DO NOT EDIT BY HAND!

import (
	"github.com/ninchat/ninchat-go"
)

// AcceptAudience action.  https://ninchat.com/api/v2#accept_audience
type AcceptAudience struct {
	QueueId *string `json:"queue_id"`
}

// String returns "accept_audience".
func (*AcceptAudience) String() string {
	return "accept_audience"
}

func (action *AcceptAudience) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "accept_audience",
		},
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("accept_audience action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *AcceptAudience) Invoke(session *ninchat.Session) (reply *DialogueUpdated, err error) {
	var buf DialogueUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// AddMember action.  https://ninchat.com/api/v2#add_member
type AddMember struct {
	QueueId *string `json:"queue_id,omitempty"`
	RealmId *string `json:"realm_id,omitempty"`
	UserId  *string `json:"user_id"`
}

// String returns "add_member".
func (*AddMember) String() string {
	return "add_member"
}

func (action *AddMember) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "add_member",
		},
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	} else {
		err = newRequestMalformedError("add_member action requires user_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *AddMember) Invoke(session *ninchat.Session) (reply *MemberJoined, err error) {
	var buf MemberJoined

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// CloseSession action.  https://ninchat.com/api/v2#close_session
type CloseSession struct {
}

// String returns "close_session".
func (*CloseSession) String() string {
	return "close_session"
}

func (action *CloseSession) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action":    "close_session",
			"action_id": nil,
		},
	}

	return
}

// CreateAccess action.  https://ninchat.com/api/v2#create_access
type CreateAccess struct {
	AccessType  *string `json:"access_type"`
	ChannelId   *string `json:"channel_id,omitempty"`
	RealmMember bool    `json:"realm_member,omitempty"`
	UserId      *string `json:"user_id,omitempty"`
}

// String returns "create_access".
func (*CreateAccess) String() string {
	return "create_access"
}

func (action *CreateAccess) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "create_access",
		},
	}

	if x := action.AccessType; x != nil {
		clientAction.Params["access_type"] = *x
	} else {
		err = newRequestMalformedError("create_access action requires access_type parameter")
		return
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.RealmMember; x {
		clientAction.Params["realm_member"] = x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *CreateAccess) Invoke(session *ninchat.Session) (reply *AccessCreated, err error) {
	var buf AccessCreated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// CreateChannel action.  https://ninchat.com/api/v2#create_channel
type CreateChannel struct {
	ChannelAttrs *ChannelAttrs `json:"channel_attrs,omitempty"`
	RealmId      *string       `json:"realm_id,omitempty"`
}

// String returns "create_channel".
func (*CreateChannel) String() string {
	return "create_channel"
}

func (action *CreateChannel) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "create_channel",
		},
	}

	if x := action.ChannelAttrs; x != nil {
		clientAction.Params["channel_attrs"] = x
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *CreateChannel) Invoke(session *ninchat.Session) (reply *ChannelJoined, err error) {
	var buf ChannelJoined

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// CreateIdentity action.  https://ninchat.com/api/v2#create_identity
type CreateIdentity struct {
	IdentityAttrs   *IdentityAttrs `json:"identity_attrs,omitempty"`
	IdentityAuthNew *string        `json:"identity_auth_new,omitempty"`
	IdentityName    *string        `json:"identity_name"`
	IdentityType    *string        `json:"identity_type"`
}

// String returns "create_identity".
func (*CreateIdentity) String() string {
	return "create_identity"
}

func (action *CreateIdentity) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "create_identity",
		},
	}

	if x := action.IdentityAttrs; x != nil {
		clientAction.Params["identity_attrs"] = x
	}

	if x := action.IdentityAuthNew; x != nil {
		clientAction.Params["identity_auth_new"] = *x
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("create_identity action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("create_identity action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *CreateIdentity) Invoke(session *ninchat.Session) (reply *IdentityCreated, err error) {
	var buf IdentityCreated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// CreateMasterKey action.  https://ninchat.com/api/v2#create_master_key
type CreateMasterKey struct {
	MasterKeyId   *string `json:"master_key_id,omitempty"`
	MasterKeyType *string `json:"master_key_type,omitempty"`
}

// String returns "create_master_key".
func (*CreateMasterKey) String() string {
	return "create_master_key"
}

func (action *CreateMasterKey) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "create_master_key",
		},
	}

	if x := action.MasterKeyId; x != nil {
		clientAction.Params["master_key_id"] = *x
	}

	if x := action.MasterKeyType; x != nil {
		clientAction.Params["master_key_type"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *CreateMasterKey) Invoke(session *ninchat.Session) (reply *MasterKeyCreated, err error) {
	var buf MasterKeyCreated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// CreateQueue action.  https://ninchat.com/api/v2#create_queue
type CreateQueue struct {
	QueueAttrs *QueueAttrs `json:"queue_attrs"`
	RealmId    *string     `json:"realm_id"`
}

// String returns "create_queue".
func (*CreateQueue) String() string {
	return "create_queue"
}

func (action *CreateQueue) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "create_queue",
		},
	}

	if x := action.QueueAttrs; x != nil {
		clientAction.Params["queue_attrs"] = x
	} else {
		err = newRequestMalformedError("create_queue action requires queue_attrs parameter")
		return
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	} else {
		err = newRequestMalformedError("create_queue action requires realm_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *CreateQueue) Invoke(session *ninchat.Session) (reply *QueueCreated, err error) {
	var buf QueueCreated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// CreateRealm action.  https://ninchat.com/api/v2#create_realm
type CreateRealm struct {
	ChannelAttrs *ChannelAttrs `json:"channel_attrs,omitempty"`
	RealmAttrs   *RealmAttrs   `json:"realm_attrs,omitempty"`
}

// String returns "create_realm".
func (*CreateRealm) String() string {
	return "create_realm"
}

func (action *CreateRealm) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "create_realm",
		},
	}

	if x := action.ChannelAttrs; x != nil {
		clientAction.Params["channel_attrs"] = x
	}

	if x := action.RealmAttrs; x != nil {
		clientAction.Params["realm_attrs"] = x
	}

	return
}

// Invoke the action synchronously.
func (action *CreateRealm) Invoke(session *ninchat.Session) (reply *RealmJoined, err error) {
	var buf RealmJoined

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteIdentity action.  https://ninchat.com/api/v2#delete_identity
type DeleteIdentity struct {
	IdentityAuth *string `json:"identity_auth,omitempty"`
	IdentityName *string `json:"identity_name"`
	IdentityType *string `json:"identity_type"`
}

// String returns "delete_identity".
func (*DeleteIdentity) String() string {
	return "delete_identity"
}

func (action *DeleteIdentity) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_identity",
		},
	}

	if x := action.IdentityAuth; x != nil {
		clientAction.Params["identity_auth"] = *x
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("delete_identity action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("delete_identity action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteIdentity) Invoke(session *ninchat.Session) (reply *IdentityDeleted, err error) {
	var buf IdentityDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteMasterKey action.  https://ninchat.com/api/v2#delete_master_key
type DeleteMasterKey struct {
	MasterKeyId     *string `json:"master_key_id"`
	MasterKeySecret *string `json:"master_key_secret,omitempty"`
	MasterKeyType   *string `json:"master_key_type,omitempty"`
	UserAuth        *string `json:"user_auth,omitempty"`
}

// String returns "delete_master_key".
func (*DeleteMasterKey) String() string {
	return "delete_master_key"
}

func (action *DeleteMasterKey) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_master_key",
		},
	}

	if x := action.MasterKeyId; x != nil {
		clientAction.Params["master_key_id"] = *x
	} else {
		err = newRequestMalformedError("delete_master_key action requires master_key_id parameter")
		return
	}

	if x := action.MasterKeySecret; x != nil {
		clientAction.Params["master_key_secret"] = *x
	}

	if x := action.MasterKeyType; x != nil {
		clientAction.Params["master_key_type"] = *x
	}

	if x := action.UserAuth; x != nil {
		clientAction.Params["user_auth"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteMasterKey) Invoke(session *ninchat.Session) (reply *MasterKeyDeleted, err error) {
	var buf MasterKeyDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteQueue action.  https://ninchat.com/api/v2#delete_queue
type DeleteQueue struct {
	QueueId *string `json:"queue_id"`
}

// String returns "delete_queue".
func (*DeleteQueue) String() string {
	return "delete_queue"
}

func (action *DeleteQueue) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_queue",
		},
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("delete_queue action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteQueue) Invoke(session *ninchat.Session) (reply *QueueDeleted, err error) {
	var buf QueueDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteQueueTranscripts action.  https://ninchat.com/api/v2#delete_queue_transcripts
type DeleteQueueTranscripts struct {
	IntervalBegin *float64 `json:"interval_begin"`
	IntervalEnd   *float64 `json:"interval_end"`
	QueueId       *string  `json:"queue_id"`
}

// String returns "delete_queue_transcripts".
func (*DeleteQueueTranscripts) String() string {
	return "delete_queue_transcripts"
}

func (action *DeleteQueueTranscripts) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_queue_transcripts",
		},
	}

	if x := action.IntervalBegin; x != nil {
		clientAction.Params["interval_begin"] = *x
	} else {
		err = newRequestMalformedError("delete_queue_transcripts action requires interval_begin parameter")
		return
	}

	if x := action.IntervalEnd; x != nil {
		clientAction.Params["interval_end"] = *x
	} else {
		err = newRequestMalformedError("delete_queue_transcripts action requires interval_end parameter")
		return
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("delete_queue_transcripts action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteQueueTranscripts) Invoke(session *ninchat.Session) (reply *QueueTranscriptsDeleted, err error) {
	var buf QueueTranscriptsDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteRealm action.  https://ninchat.com/api/v2#delete_realm
type DeleteRealm struct {
	RealmId *string `json:"realm_id"`
}

// String returns "delete_realm".
func (*DeleteRealm) String() string {
	return "delete_realm"
}

func (action *DeleteRealm) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_realm",
		},
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	} else {
		err = newRequestMalformedError("delete_realm action requires realm_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteRealm) Invoke(session *ninchat.Session) (reply *RealmDeleted, err error) {
	var buf RealmDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteTranscript action.  https://ninchat.com/api/v2#delete_transcript
type DeleteTranscript struct {
	DialogueId []string `json:"dialogue_id"`
}

// String returns "delete_transcript".
func (*DeleteTranscript) String() string {
	return "delete_transcript"
}

func (action *DeleteTranscript) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_transcript",
		},
	}

	if x := action.DialogueId; x != nil {
		clientAction.Params["dialogue_id"] = x
	} else {
		err = newRequestMalformedError("delete_transcript action requires dialogue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteTranscript) Invoke(session *ninchat.Session) (reply *TranscriptDeleted, err error) {
	var buf TranscriptDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DeleteUser action.  https://ninchat.com/api/v2#delete_user
type DeleteUser struct {
	UserAuth *string `json:"user_auth"`
}

// String returns "delete_user".
func (*DeleteUser) String() string {
	return "delete_user"
}

func (action *DeleteUser) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "delete_user",
		},
	}

	if x := action.UserAuth; x != nil {
		clientAction.Params["user_auth"] = *x
	} else {
		err = newRequestMalformedError("delete_user action requires user_auth parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DeleteUser) Invoke(session *ninchat.Session) (reply *UserDeleted, err error) {
	var buf UserDeleted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeAccess action.  https://ninchat.com/api/v2#describe_access
type DescribeAccess struct {
	ActionIdDisabled bool    `json:"-"`
	AccessKey        *string `json:"access_key"`
}

// String returns "describe_access".
func (*DescribeAccess) String() string {
	return "describe_access"
}

func (action *DescribeAccess) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_access",
		},
	}

	if action.ActionIdDisabled {
		clientAction.Params["action_id"] = nil
	}

	if x := action.AccessKey; x != nil {
		clientAction.Params["access_key"] = *x
	} else {
		err = newRequestMalformedError("describe_access action requires access_key parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeAccess) Invoke(session *ninchat.Session) (reply *AccessFound, err error) {
	var buf AccessFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeChannel action.  https://ninchat.com/api/v2#describe_channel
type DescribeChannel struct {
	ChannelId *string `json:"channel_id"`
}

// String returns "describe_channel".
func (*DescribeChannel) String() string {
	return "describe_channel"
}

func (action *DescribeChannel) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_channel",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	} else {
		err = newRequestMalformedError("describe_channel action requires channel_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeChannel) Invoke(session *ninchat.Session) (reply *ChannelFound, err error) {
	var buf ChannelFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeIdentity action.  https://ninchat.com/api/v2#describe_identity
type DescribeIdentity struct {
	IdentityName *string `json:"identity_name"`
	IdentityType *string `json:"identity_type"`
}

// String returns "describe_identity".
func (*DescribeIdentity) String() string {
	return "describe_identity"
}

func (action *DescribeIdentity) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_identity",
		},
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("describe_identity action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("describe_identity action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeIdentity) Invoke(session *ninchat.Session) (reply *IdentityFound, err error) {
	var buf IdentityFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeMasterKeys action.  https://ninchat.com/api/v2#describe_master_keys
type DescribeMasterKeys struct {
}

// String returns "describe_master_keys".
func (*DescribeMasterKeys) String() string {
	return "describe_master_keys"
}

func (action *DescribeMasterKeys) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_master_keys",
		},
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeMasterKeys) Invoke(session *ninchat.Session) (reply *MasterKeysFound, err error) {
	var buf MasterKeysFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeQueue action.  https://ninchat.com/api/v2#describe_queue
type DescribeQueue struct {
	QueueId *string `json:"queue_id"`
}

// String returns "describe_queue".
func (*DescribeQueue) String() string {
	return "describe_queue"
}

func (action *DescribeQueue) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_queue",
		},
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("describe_queue action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeQueue) Invoke(session *ninchat.Session) (reply *QueueFound, err error) {
	var buf QueueFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeQueueTranscripts action.  https://ninchat.com/api/v2#describe_queue_transcripts
type DescribeQueueTranscripts struct {
	IntervalBegin *float64 `json:"interval_begin"`
	IntervalEnd   *float64 `json:"interval_end,omitempty"`
	QueueId       *string  `json:"queue_id"`
}

// String returns "describe_queue_transcripts".
func (*DescribeQueueTranscripts) String() string {
	return "describe_queue_transcripts"
}

func (action *DescribeQueueTranscripts) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_queue_transcripts",
		},
	}

	if x := action.IntervalBegin; x != nil {
		clientAction.Params["interval_begin"] = *x
	} else {
		err = newRequestMalformedError("describe_queue_transcripts action requires interval_begin parameter")
		return
	}

	if x := action.IntervalEnd; x != nil {
		clientAction.Params["interval_end"] = *x
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("describe_queue_transcripts action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeQueueTranscripts) Invoke(session *ninchat.Session) (reply *QueueTranscriptsFound, err error) {
	var buf QueueTranscriptsFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeRealm action.  https://ninchat.com/api/v2#describe_realm
type DescribeRealm struct {
	RealmId *string `json:"realm_id"`
}

// String returns "describe_realm".
func (*DescribeRealm) String() string {
	return "describe_realm"
}

func (action *DescribeRealm) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_realm",
		},
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	} else {
		err = newRequestMalformedError("describe_realm action requires realm_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeRealm) Invoke(session *ninchat.Session) (reply *RealmFound, err error) {
	var buf RealmFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeRealmQueues action.  https://ninchat.com/api/v2#describe_realm_queues
type DescribeRealmQueues struct {
	RealmId *string `json:"realm_id"`
}

// String returns "describe_realm_queues".
func (*DescribeRealmQueues) String() string {
	return "describe_realm_queues"
}

func (action *DescribeRealmQueues) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_realm_queues",
		},
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	} else {
		err = newRequestMalformedError("describe_realm_queues action requires realm_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeRealmQueues) Invoke(session *ninchat.Session) (reply *RealmQueuesFound, err error) {
	var buf RealmQueuesFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DescribeUser action.  https://ninchat.com/api/v2#describe_user
type DescribeUser struct {
	UserId *string `json:"user_id,omitempty"`
}

// String returns "describe_user".
func (*DescribeUser) String() string {
	return "describe_user"
}

func (action *DescribeUser) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "describe_user",
		},
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *DescribeUser) Invoke(session *ninchat.Session) (reply *UserFound, err error) {
	var buf UserFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// DiscardHistory action.  https://ninchat.com/api/v2#discard_history
type DiscardHistory struct {
	MessageId *string `json:"message_id"`
	UserId    *string `json:"user_id"`
}

// String returns "discard_history".
func (*DiscardHistory) String() string {
	return "discard_history"
}

func (action *DiscardHistory) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "discard_history",
		},
	}

	if x := action.MessageId; x != nil {
		clientAction.Params["message_id"] = *x
	} else {
		err = newRequestMalformedError("discard_history action requires message_id parameter")
		return
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	} else {
		err = newRequestMalformedError("discard_history action requires user_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *DiscardHistory) Invoke(session *ninchat.Session) (reply *HistoryDiscarded, err error) {
	var buf HistoryDiscarded

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// FollowChannel action.  https://ninchat.com/api/v2#follow_channel
type FollowChannel struct {
	ChannelId     *string `json:"channel_id"`
	MasterKeyType *string `json:"master_key_type,omitempty"`
	MasterSign    *string `json:"master_sign,omitempty"`
}

// String returns "follow_channel".
func (*FollowChannel) String() string {
	return "follow_channel"
}

func (action *FollowChannel) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "follow_channel",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	} else {
		err = newRequestMalformedError("follow_channel action requires channel_id parameter")
		return
	}

	if x := action.MasterKeyType; x != nil {
		clientAction.Params["master_key_type"] = *x
	}

	if x := action.MasterSign; x != nil {
		clientAction.Params["master_sign"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *FollowChannel) Invoke(session *ninchat.Session) (reply *ChannelFound, err error) {
	var buf ChannelFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// GetTranscript action.  https://ninchat.com/api/v2#get_transcript
type GetTranscript struct {
	DialogueId []string `json:"dialogue_id"`
	MessageId  *string  `json:"message_id,omitempty"`
}

// String returns "get_transcript".
func (*GetTranscript) String() string {
	return "get_transcript"
}

func (action *GetTranscript) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "get_transcript",
		},
	}

	if x := action.DialogueId; x != nil {
		clientAction.Params["dialogue_id"] = x
	} else {
		err = newRequestMalformedError("get_transcript action requires dialogue_id parameter")
		return
	}

	if x := action.MessageId; x != nil {
		clientAction.Params["message_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *GetTranscript) Invoke(session *ninchat.Session) (reply *TranscriptContents, err error) {
	var buf TranscriptContents

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// JoinChannel action.  https://ninchat.com/api/v2#join_channel
type JoinChannel struct {
	AccessKey     *string             `json:"access_key,omitempty"`
	ChannelId     *string             `json:"channel_id,omitempty"`
	MasterKeyType *string             `json:"master_key_type,omitempty"`
	MasterSign    *string             `json:"master_sign,omitempty"`
	MemberAttrs   *ChannelMemberAttrs `json:"member_attrs,omitempty"`
}

// String returns "join_channel".
func (*JoinChannel) String() string {
	return "join_channel"
}

func (action *JoinChannel) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "join_channel",
		},
	}

	if x := action.AccessKey; x != nil {
		clientAction.Params["access_key"] = *x
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.MasterKeyType; x != nil {
		clientAction.Params["master_key_type"] = *x
	}

	if x := action.MasterSign; x != nil {
		clientAction.Params["master_sign"] = *x
	}

	if x := action.MemberAttrs; x != nil {
		clientAction.Params["member_attrs"] = x
	}

	return
}

// Invoke the action synchronously.
func (action *JoinChannel) Invoke(session *ninchat.Session) (reply *ChannelJoined, err error) {
	var buf ChannelJoined

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// LoadHistory action.  https://ninchat.com/api/v2#load_history
type LoadHistory struct {
	ChannelId       *string  `json:"channel_id,omitempty"`
	FilterProperty  *string  `json:"filter_property,omitempty"`
	FilterSubstring *string  `json:"filter_substring,omitempty"`
	HistoryLength   *int     `json:"history_length,omitempty"`
	HistoryOrder    *int     `json:"history_order,omitempty"`
	MessageId       *string  `json:"message_id,omitempty"`
	MessageTypes    []string `json:"message_types,omitempty"`
	UserId          *string  `json:"user_id,omitempty"`
}

// String returns "load_history".
func (*LoadHistory) String() string {
	return "load_history"
}

func (action *LoadHistory) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "load_history",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.FilterProperty; x != nil {
		clientAction.Params["filter_property"] = *x
	}

	if x := action.FilterSubstring; x != nil {
		clientAction.Params["filter_substring"] = *x
	}

	if x := action.HistoryLength; x != nil {
		clientAction.Params["history_length"] = *x
	}

	if x := action.HistoryOrder; x != nil {
		clientAction.Params["history_order"] = *x
	}

	if x := action.MessageId; x != nil {
		clientAction.Params["message_id"] = *x
	}

	if x := action.MessageTypes; x != nil {
		clientAction.Params["message_types"] = x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *LoadHistory) Invoke(session *ninchat.Session) (reply *HistoryResults, err error) {
	var buf HistoryResults

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// PartChannel action.  https://ninchat.com/api/v2#part_channel
type PartChannel struct {
	ChannelId *string `json:"channel_id"`
}

// String returns "part_channel".
func (*PartChannel) String() string {
	return "part_channel"
}

func (action *PartChannel) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "part_channel",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	} else {
		err = newRequestMalformedError("part_channel action requires channel_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *PartChannel) Invoke(session *ninchat.Session) (reply *ChannelParted, err error) {
	var buf ChannelParted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// Ping action.  https://ninchat.com/api/v2#ping
type Ping struct {
	ActionIdDisabled bool `json:"-"`
}

// String returns "ping".
func (*Ping) String() string {
	return "ping"
}

func (action *Ping) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "ping",
		},
	}

	if action.ActionIdDisabled {
		clientAction.Params["action_id"] = nil
	}

	return
}

// Invoke the action synchronously.
func (action *Ping) Invoke(session *ninchat.Session) (reply *Pong, err error) {
	var buf Pong

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// RemoveMember action.  https://ninchat.com/api/v2#remove_member
type RemoveMember struct {
	ChannelId *string `json:"channel_id,omitempty"`
	QueueId   *string `json:"queue_id,omitempty"`
	RealmId   *string `json:"realm_id,omitempty"`
	UserId    *string `json:"user_id"`
}

// String returns "remove_member".
func (*RemoveMember) String() string {
	return "remove_member"
}

func (action *RemoveMember) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "remove_member",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	} else {
		err = newRequestMalformedError("remove_member action requires user_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *RemoveMember) Invoke(session *ninchat.Session) (reply *MemberParted, err error) {
	var buf MemberParted

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// RequestAudience action.  https://ninchat.com/api/v2#request_audience
type RequestAudience struct {
	AudienceMetadata map[string]interface{} `json:"audience_metadata,omitempty"`
	QueueId          *string                `json:"queue_id"`
}

// String returns "request_audience".
func (*RequestAudience) String() string {
	return "request_audience"
}

func (action *RequestAudience) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "request_audience",
		},
	}

	if x := action.AudienceMetadata; x != nil {
		clientAction.Params["audience_metadata"] = x
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("request_audience action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *RequestAudience) Invoke(session *ninchat.Session) (reply *AudienceEnqueued, err error) {
	var buf AudienceEnqueued

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// RequestIdentityAuthResetAccess action.  https://ninchat.com/api/v2#request_identity_auth_reset_access
type RequestIdentityAuthResetAccess struct {
	ActionIdDisabled bool    `json:"-"`
	IdentityName     *string `json:"identity_name"`
	IdentityType     *string `json:"identity_type"`
}

// String returns "request_identity_auth_reset_access".
func (*RequestIdentityAuthResetAccess) String() string {
	return "request_identity_auth_reset_access"
}

func (action *RequestIdentityAuthResetAccess) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "request_identity_auth_reset_access",
		},
	}

	if action.ActionIdDisabled {
		clientAction.Params["action_id"] = nil
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("request_identity_auth_reset_access action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("request_identity_auth_reset_access action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *RequestIdentityAuthResetAccess) Invoke(session *ninchat.Session) (reply *AccessCreated, err error) {
	var buf AccessCreated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// RequestIdentityVerifyAccess action.  https://ninchat.com/api/v2#request_identity_verify_access
type RequestIdentityVerifyAccess struct {
	ActionIdDisabled bool    `json:"-"`
	IdentityName     *string `json:"identity_name"`
	IdentityType     *string `json:"identity_type"`
}

// String returns "request_identity_verify_access".
func (*RequestIdentityVerifyAccess) String() string {
	return "request_identity_verify_access"
}

func (action *RequestIdentityVerifyAccess) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "request_identity_verify_access",
		},
	}

	if action.ActionIdDisabled {
		clientAction.Params["action_id"] = nil
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("request_identity_verify_access action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("request_identity_verify_access action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *RequestIdentityVerifyAccess) Invoke(session *ninchat.Session) (reply *AccessCreated, err error) {
	var buf AccessCreated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// ResetIdentityAuth action.  https://ninchat.com/api/v2#reset_identity_auth
type ResetIdentityAuth struct {
	AccessKey       *string `json:"access_key"`
	IdentityAuthNew *string `json:"identity_auth_new"`
}

// String returns "reset_identity_auth".
func (*ResetIdentityAuth) String() string {
	return "reset_identity_auth"
}

func (action *ResetIdentityAuth) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action":    "reset_identity_auth",
			"action_id": nil,
		},
	}

	if x := action.AccessKey; x != nil {
		clientAction.Params["access_key"] = *x
	} else {
		err = newRequestMalformedError("reset_identity_auth action requires access_key parameter")
		return
	}

	if x := action.IdentityAuthNew; x != nil {
		clientAction.Params["identity_auth_new"] = *x
	} else {
		err = newRequestMalformedError("reset_identity_auth action requires identity_auth_new parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *ResetIdentityAuth) Invoke(session *ninchat.Session) (reply *IdentityUpdated, err error) {
	var buf IdentityUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// ResumeSession action.  https://ninchat.com/api/v2#resume_session
type ResumeSession struct {
}

// String returns "resume_session".
func (*ResumeSession) String() string {
	return "resume_session"
}

func (action *ResumeSession) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action":    "resume_session",
			"action_id": nil,
		},
	}

	return
}

// Search action.  https://ninchat.com/api/v2#search
type Search struct {
	SearchTerm *string `json:"search_term"`
}

// String returns "search".
func (*Search) String() string {
	return "search"
}

func (action *Search) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "search",
		},
	}

	if x := action.SearchTerm; x != nil {
		clientAction.Params["search_term"] = *x
	} else {
		err = newRequestMalformedError("search action requires search_term parameter")
		return
	}

	return
}

// SendAccess action.  https://ninchat.com/api/v2#send_access
type SendAccess struct {
	AccessKey    *string `json:"access_key,omitempty"`
	IdentityName *string `json:"identity_name,omitempty"`
	IdentityType *string `json:"identity_type,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
}

// String returns "send_access".
func (*SendAccess) String() string {
	return "send_access"
}

func (action *SendAccess) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "send_access",
		},
	}

	if x := action.AccessKey; x != nil {
		clientAction.Params["access_key"] = *x
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *SendAccess) Invoke(session *ninchat.Session) (reply *AccessFound, err error) {
	var buf AccessFound

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// SendMessage action.  https://ninchat.com/api/v2#send_message
type SendMessage struct {
	ActionIdDisabled    bool     `json:"-"`
	ChannelId           *string  `json:"channel_id,omitempty"`
	IdentityName        *string  `json:"identity_name,omitempty"`
	IdentityType        *string  `json:"identity_type,omitempty"`
	MessageFold         bool     `json:"message_fold,omitempty"`
	MessageRecipientIds []string `json:"message_recipient_ids,omitempty"`
	MessageTtl          *float64 `json:"message_ttl,omitempty"`
	MessageType         *string  `json:"message_type"`
	UserId              *string  `json:"user_id,omitempty"`
	Payload             []ninchat.Frame
}

// String returns "send_message".
func (*SendMessage) String() string {
	return "send_message"
}

func (action *SendMessage) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "send_message",
		},
		Payload: action.Payload,
	}

	if action.ActionIdDisabled {
		clientAction.Params["action_id"] = nil
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	}

	if x := action.MessageFold; x {
		clientAction.Params["message_fold"] = x
	}

	if x := action.MessageRecipientIds; x != nil {
		clientAction.Params["message_recipient_ids"] = x
	}

	if x := action.MessageTtl; x != nil {
		clientAction.Params["message_ttl"] = *x
	}

	if x := action.MessageType; x != nil {
		clientAction.Params["message_type"] = *x
	} else {
		err = newRequestMalformedError("send_message action requires message_type parameter")
		return
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	}

	return
}

// Invoke the action synchronously.
func (action *SendMessage) Invoke(session *ninchat.Session) (reply *MessageReceived, err error) {
	var buf MessageReceived

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateChannel action.  https://ninchat.com/api/v2#update_channel
type UpdateChannel struct {
	ChannelAttrs *ChannelAttrs `json:"channel_attrs"`
	ChannelId    *string       `json:"channel_id"`
}

// String returns "update_channel".
func (*UpdateChannel) String() string {
	return "update_channel"
}

func (action *UpdateChannel) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_channel",
		},
	}

	if x := action.ChannelAttrs; x != nil {
		clientAction.Params["channel_attrs"] = x
	} else {
		err = newRequestMalformedError("update_channel action requires channel_attrs parameter")
		return
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	} else {
		err = newRequestMalformedError("update_channel action requires channel_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateChannel) Invoke(session *ninchat.Session) (reply *ChannelUpdated, err error) {
	var buf ChannelUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateDialogue action.  https://ninchat.com/api/v2#update_dialogue
type UpdateDialogue struct {
	DialogueStatus *string              `json:"dialogue_status,omitempty"`
	MemberAttrs    *DialogueMemberAttrs `json:"member_attrs,omitempty"`
	UserId         *string              `json:"user_id"`
}

// String returns "update_dialogue".
func (*UpdateDialogue) String() string {
	return "update_dialogue"
}

func (action *UpdateDialogue) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_dialogue",
		},
	}

	if x := action.DialogueStatus; x != nil {
		clientAction.Params["dialogue_status"] = *x
	}

	if x := action.MemberAttrs; x != nil {
		clientAction.Params["member_attrs"] = x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	} else {
		err = newRequestMalformedError("update_dialogue action requires user_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateDialogue) Invoke(session *ninchat.Session) (reply *DialogueUpdated, err error) {
	var buf DialogueUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateIdentity action.  https://ninchat.com/api/v2#update_identity
type UpdateIdentity struct {
	IdentityAttrs *IdentityAttrs `json:"identity_attrs"`
	IdentityName  *string        `json:"identity_name"`
	IdentityType  *string        `json:"identity_type"`
}

// String returns "update_identity".
func (*UpdateIdentity) String() string {
	return "update_identity"
}

func (action *UpdateIdentity) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_identity",
		},
	}

	if x := action.IdentityAttrs; x != nil {
		clientAction.Params["identity_attrs"] = x
	} else {
		err = newRequestMalformedError("update_identity action requires identity_attrs parameter")
		return
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("update_identity action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("update_identity action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateIdentity) Invoke(session *ninchat.Session) (reply *IdentityUpdated, err error) {
	var buf IdentityUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateIdentityAuth action.  https://ninchat.com/api/v2#update_identity_auth
type UpdateIdentityAuth struct {
	IdentityAuth    *string `json:"identity_auth,omitempty"`
	IdentityAuthNew *string `json:"identity_auth_new"`
	IdentityName    *string `json:"identity_name"`
	IdentityType    *string `json:"identity_type"`
}

// String returns "update_identity_auth".
func (*UpdateIdentityAuth) String() string {
	return "update_identity_auth"
}

func (action *UpdateIdentityAuth) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_identity_auth",
		},
	}

	if x := action.IdentityAuth; x != nil {
		clientAction.Params["identity_auth"] = *x
	}

	if x := action.IdentityAuthNew; x != nil {
		clientAction.Params["identity_auth_new"] = *x
	} else {
		err = newRequestMalformedError("update_identity_auth action requires identity_auth_new parameter")
		return
	}

	if x := action.IdentityName; x != nil {
		clientAction.Params["identity_name"] = *x
	} else {
		err = newRequestMalformedError("update_identity_auth action requires identity_name parameter")
		return
	}

	if x := action.IdentityType; x != nil {
		clientAction.Params["identity_type"] = *x
	} else {
		err = newRequestMalformedError("update_identity_auth action requires identity_type parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateIdentityAuth) Invoke(session *ninchat.Session) (reply *IdentityUpdated, err error) {
	var buf IdentityUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateMember action.  https://ninchat.com/api/v2#update_member
type UpdateMember struct {
	ChannelId   *string     `json:"channel_id,omitempty"`
	MemberAttrs MemberAttrs `json:"member_attrs"`
	RealmId     *string     `json:"realm_id,omitempty"`
	UserId      *string     `json:"user_id"`
}

// String returns "update_member".
func (*UpdateMember) String() string {
	return "update_member"
}

func (action *UpdateMember) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_member",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.MemberAttrs; x != nil {
		clientAction.Params["member_attrs"] = x
	} else {
		err = newRequestMalformedError("update_member action requires member_attrs parameter")
		return
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	} else {
		err = newRequestMalformedError("update_member action requires user_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateMember) Invoke(session *ninchat.Session) (reply *MemberUpdated, err error) {
	var buf MemberUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateMessage action.  https://ninchat.com/api/v2#update_message
type UpdateMessage struct {
	ChannelId     *string `json:"channel_id"`
	MessageHidden bool    `json:"message_hidden"`
	MessageId     *string `json:"message_id"`
}

// String returns "update_message".
func (*UpdateMessage) String() string {
	return "update_message"
}

func (action *UpdateMessage) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_message",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	} else {
		err = newRequestMalformedError("update_message action requires channel_id parameter")
		return
	}

	if x := action.MessageHidden; x {
		clientAction.Params["message_hidden"] = x
	} else {
		err = newRequestMalformedError("update_message action requires message_hidden parameter")
		return
	}

	if x := action.MessageId; x != nil {
		clientAction.Params["message_id"] = *x
	} else {
		err = newRequestMalformedError("update_message action requires message_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateMessage) Invoke(session *ninchat.Session) (reply *MessageUpdated, err error) {
	var buf MessageUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateQueue action.  https://ninchat.com/api/v2#update_queue
type UpdateQueue struct {
	QueueAttrs *QueueAttrs `json:"queue_attrs"`
	QueueId    *string     `json:"queue_id"`
}

// String returns "update_queue".
func (*UpdateQueue) String() string {
	return "update_queue"
}

func (action *UpdateQueue) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_queue",
		},
	}

	if x := action.QueueAttrs; x != nil {
		clientAction.Params["queue_attrs"] = x
	} else {
		err = newRequestMalformedError("update_queue action requires queue_attrs parameter")
		return
	}

	if x := action.QueueId; x != nil {
		clientAction.Params["queue_id"] = *x
	} else {
		err = newRequestMalformedError("update_queue action requires queue_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateQueue) Invoke(session *ninchat.Session) (reply *QueueUpdated, err error) {
	var buf QueueUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateRealm action.  https://ninchat.com/api/v2#update_realm
type UpdateRealm struct {
	RealmAttrs *RealmAttrs `json:"realm_attrs"`
	RealmId    *string     `json:"realm_id"`
}

// String returns "update_realm".
func (*UpdateRealm) String() string {
	return "update_realm"
}

func (action *UpdateRealm) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_realm",
		},
	}

	if x := action.RealmAttrs; x != nil {
		clientAction.Params["realm_attrs"] = x
	} else {
		err = newRequestMalformedError("update_realm action requires realm_attrs parameter")
		return
	}

	if x := action.RealmId; x != nil {
		clientAction.Params["realm_id"] = *x
	} else {
		err = newRequestMalformedError("update_realm action requires realm_id parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateRealm) Invoke(session *ninchat.Session) (reply *RealmUpdated, err error) {
	var buf RealmUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateSession action.  https://ninchat.com/api/v2#update_session
type UpdateSession struct {
	ChannelId   *string `json:"channel_id,omitempty"`
	MessageId   *string `json:"message_id,omitempty"`
	SessionIdle bool    `json:"session_idle,omitempty"`
	UserId      *string `json:"user_id,omitempty"`
}

// String returns "update_session".
func (*UpdateSession) String() string {
	return "update_session"
}

func (action *UpdateSession) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action":    "update_session",
			"action_id": nil,
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	}

	if x := action.MessageId; x != nil {
		clientAction.Params["message_id"] = *x
	}

	if x := action.SessionIdle; x {
		clientAction.Params["session_idle"] = x
	}

	if x := action.UserId; x != nil {
		clientAction.Params["user_id"] = *x
	}

	return
}

// UpdateUser action.  https://ninchat.com/api/v2#update_user
type UpdateUser struct {
	PayloadAttrs []string               `json:"payload_attrs,omitempty"`
	UserAttrs    *UserAttrs             `json:"user_attrs,omitempty"`
	UserSettings map[string]interface{} `json:"user_settings,omitempty"`
	Payload      []ninchat.Frame
}

// String returns "update_user".
func (*UpdateUser) String() string {
	return "update_user"
}

func (action *UpdateUser) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_user",
		},
		Payload: action.Payload,
	}

	if x := action.PayloadAttrs; x != nil {
		clientAction.Params["payload_attrs"] = x
	}

	if x := action.UserAttrs; x != nil {
		clientAction.Params["user_attrs"] = x
	}

	if x := action.UserSettings; x != nil {
		clientAction.Params["user_settings"] = x
	}

	return
}

// Invoke the action synchronously.
func (action *UpdateUser) Invoke(session *ninchat.Session) (reply *UserUpdated, err error) {
	var buf UserUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}

// UpdateUserMessages action.  https://ninchat.com/api/v2#update_user_messages
type UpdateUserMessages struct {
	ChannelId     *string  `json:"channel_id"`
	IntervalEnd   *float64 `json:"interval_end,omitempty"`
	MessageHidden bool     `json:"message_hidden"`
	MessageId     *string  `json:"message_id,omitempty"`
	MessageUserId *string  `json:"message_user_id"`
}

// String returns "update_user_messages".
func (*UpdateUserMessages) String() string {
	return "update_user_messages"
}

func (action *UpdateUserMessages) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "update_user_messages",
		},
	}

	if x := action.ChannelId; x != nil {
		clientAction.Params["channel_id"] = *x
	} else {
		err = newRequestMalformedError("update_user_messages action requires channel_id parameter")
		return
	}

	if x := action.IntervalEnd; x != nil {
		clientAction.Params["interval_end"] = *x
	}

	if x := action.MessageHidden; x {
		clientAction.Params["message_hidden"] = x
	} else {
		err = newRequestMalformedError("update_user_messages action requires message_hidden parameter")
		return
	}

	if x := action.MessageId; x != nil {
		clientAction.Params["message_id"] = *x
	}

	if x := action.MessageUserId; x != nil {
		clientAction.Params["message_user_id"] = *x
	} else {
		err = newRequestMalformedError("update_user_messages action requires message_user_id parameter")
		return
	}

	return
}

// VerifyIdentity action.  https://ninchat.com/api/v2#verify_identity
type VerifyIdentity struct {
	ActionIdDisabled bool    `json:"-"`
	AccessKey        *string `json:"access_key"`
	IdentityAccept   bool    `json:"identity_accept"`
}

// String returns "verify_identity".
func (*VerifyIdentity) String() string {
	return "verify_identity"
}

func (action *VerifyIdentity) newClientAction() (clientAction *ninchat.Action, err error) {
	clientAction = &ninchat.Action{
		Params: map[string]interface{}{
			"action": "verify_identity",
		},
	}

	if action.ActionIdDisabled {
		clientAction.Params["action_id"] = nil
	}

	if x := action.AccessKey; x != nil {
		clientAction.Params["access_key"] = *x
	} else {
		err = newRequestMalformedError("verify_identity action requires access_key parameter")
		return
	}

	if x := action.IdentityAccept; x {
		clientAction.Params["identity_accept"] = x
	} else {
		err = newRequestMalformedError("verify_identity action requires identity_accept parameter")
		return
	}

	return
}

// Invoke the action synchronously.
func (action *VerifyIdentity) Invoke(session *ninchat.Session) (reply *IdentityUpdated, err error) {
	var buf IdentityUpdated

	ok, err := unaryCall(session, action, &buf)
	if err != nil {
		return nil, err
	}

	if ok {
		return &buf, nil
	}

	return nil, nil
}
