package ninchatapi

// THIS FILE IS AUTO GENERATED BY generate.py - DO NOT EDIT BY HAND!
// Definitions can be found at: https://github.com/ninchat/ninchat-api/tree/master/json

import ninchat ".."

// AccessCreated event.
type AccessCreated struct {
	AccessKey  *string `json:"access_key,omitempty"`
	AccessType string  `json:"access_type"`
}

func (*AccessCreated) String() string {
	return "access_created"
}

func (target *AccessCreated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "access_created" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["access_key"]; x != nil {
		if y, ok := x.(string); ok {
			target.AccessKey = &y
		}
	}

	if x := source["access_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.AccessType = y
		}
	}

	return nil
}

// AccessFound event.
type AccessFound struct {
	AccessType   string        `json:"access_type"`
	ChannelAttrs *ChannelAttrs `json:"channel_attrs,omitempty"`
	ChannelId    *string       `json:"channel_id,omitempty"`
	IdentityName *string       `json:"identity_name,omitempty"`
	IdentityType *string       `json:"identity_type,omitempty"`
	RealmAttrs   *RealmAttrs   `json:"realm_attrs,omitempty"`
	RealmId      *string       `json:"realm_id,omitempty"`
	RealmMember  bool          `json:"realm_member,omitempty"`
	UserAttrs    *UserAttrs    `json:"user_attrs,omitempty"`
	UserId       *string       `json:"user_id,omitempty"`
}

func (*AccessFound) String() string {
	return "access_found"
}

func (target *AccessFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "access_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["access_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.AccessType = y
		}
	}

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = new(ChannelAttrs)
			target.ChannelAttrs.init(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = &y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = &y
		}
	}

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = new(RealmAttrs)
			target.RealmAttrs.init(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["realm_member"]; x != nil {
		target.RealmMember = true
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// AudienceEnqueued event.
type AudienceEnqueued struct {
	QueueAttrs    *QueueAttrs `json:"queue_attrs"`
	QueueId       string      `json:"queue_id"`
	QueuePosition int         `json:"queue_position"`
}

func (*AudienceEnqueued) String() string {
	return "audience_enqueued"
}

func (target *AudienceEnqueued) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "audience_enqueued" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = new(QueueAttrs)
			target.QueueAttrs.init(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["queue_position"]; x != nil {
		if y, ok := x.(int); ok {
			target.QueuePosition = y
		}
	}

	return nil
}

// ChannelDeleted event.
type ChannelDeleted struct {
	ChannelId string `json:"channel_id"`
}

func (*ChannelDeleted) String() string {
	return "channel_deleted"
}

func (target *ChannelDeleted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_deleted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	return nil
}

// ChannelFound event.
type ChannelFound struct {
	ChannelAttrs   *ChannelAttrs   `json:"channel_attrs"`
	ChannelId      string          `json:"channel_id"`
	ChannelMembers *ChannelMembers `json:"channel_members,omitempty"`
	ChannelStatus  *string         `json:"channel_status,omitempty"`
	RealmId        *string         `json:"realm_id,omitempty"`
}

func (*ChannelFound) String() string {
	return "channel_found"
}

func (target *ChannelFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = new(ChannelAttrs)
			target.ChannelAttrs.init(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["channel_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelMembers = new(ChannelMembers)
			target.ChannelMembers.init(y)
		}
	}

	if x := source["channel_status"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelStatus = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// ChannelJoined event.
type ChannelJoined struct {
	ChannelAttrs   *ChannelAttrs   `json:"channel_attrs"`
	ChannelId      string          `json:"channel_id"`
	ChannelMembers *ChannelMembers `json:"channel_members"`
	RealmId        *string         `json:"realm_id,omitempty"`
}

func (*ChannelJoined) String() string {
	return "channel_joined"
}

func (target *ChannelJoined) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_joined" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = new(ChannelAttrs)
			target.ChannelAttrs.init(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["channel_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelMembers = new(ChannelMembers)
			target.ChannelMembers.init(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// ChannelMemberJoined event.
type ChannelMemberJoined struct {
	ChannelId   string      `json:"channel_id"`
	MemberAttrs interface{} `json:"member_attrs"`
	UserAttrs   *UserAttrs  `json:"user_attrs"`
	UserId      string      `json:"user_id"`
}

func (*ChannelMemberJoined) String() string {
	return "channel_member_joined"
}

func (target *ChannelMemberJoined) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_member_joined" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = y
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// ChannelMemberParted event.
type ChannelMemberParted struct {
	ChannelId *string `json:"channel_id,omitempty"`
	RealmId   *string `json:"realm_id,omitempty"`
	UserId    string  `json:"user_id"`
}

func (*ChannelMemberParted) String() string {
	return "channel_member_parted"
}

func (target *ChannelMemberParted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_member_parted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// ChannelMemberUpdated event.
type ChannelMemberUpdated struct {
	ChannelId   *string     `json:"channel_id,omitempty"`
	MemberAttrs interface{} `json:"member_attrs"`
	RealmId     *string     `json:"realm_id,omitempty"`
	UserId      string      `json:"user_id"`
}

func (*ChannelMemberUpdated) String() string {
	return "channel_member_updated"
}

func (target *ChannelMemberUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_member_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// ChannelParted event.
type ChannelParted struct {
	ChannelId string `json:"channel_id"`
}

func (*ChannelParted) String() string {
	return "channel_parted"
}

func (target *ChannelParted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_parted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	return nil
}

// ChannelUpdated event.
type ChannelUpdated struct {
	ChannelAttrs *ChannelAttrs `json:"channel_attrs"`
	ChannelId    string        `json:"channel_id"`
	RealmId      *string       `json:"realm_id,omitempty"`
}

func (*ChannelUpdated) String() string {
	return "channel_updated"
}

func (target *ChannelUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = new(ChannelAttrs)
			target.ChannelAttrs.init(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// DialogueUpdated event.
type DialogueUpdated struct {
	AudienceMetadata map[string]interface{} `json:"audience_metadata,omitempty"`
	DialogueMembers  *DialogueMembers       `json:"dialogue_members"`
	DialogueStatus   *string                `json:"dialogue_status,omitempty"`
	UserId           string                 `json:"user_id"`
}

func (*DialogueUpdated) String() string {
	return "dialogue_updated"
}

func (target *DialogueUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "dialogue_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["audience_metadata"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.AudienceMetadata = y
		}
	}

	if x := source["dialogue_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.DialogueMembers = new(DialogueMembers)
			target.DialogueMembers.init(y)
		}
	}

	if x := source["dialogue_status"]; x != nil {
		if y, ok := x.(string); ok {
			target.DialogueStatus = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Error event.
type Error struct {
	ChannelId    *string `json:"channel_id,omitempty"`
	ErrorReason  *string `json:"error_reason,omitempty"`
	ErrorType    string  `json:"error_type"`
	IdentityName *string `json:"identity_name,omitempty"`
	IdentityType *string `json:"identity_type,omitempty"`
	MessageType  *string `json:"message_type,omitempty"`
	QueueId      *string `json:"queue_id,omitempty"`
	RealmId      *string `json:"realm_id,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
}

func (*Error) String() string {
	return "error"
}

func (target *Error) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "error" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["error_reason"]; x != nil {
		if y, ok := x.(string); ok {
			target.ErrorReason = &y
		}
	}

	if x := source["error_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.ErrorType = y
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = &y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = &y
		}
	}

	if x := source["message_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageType = &y
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// HistoryDiscarded event.
type HistoryDiscarded struct {
	ChannelId *string `json:"channel_id,omitempty"`
	MessageId string  `json:"message_id"`
	UserId    *string `json:"user_id,omitempty"`
}

func (*HistoryDiscarded) String() string {
	return "history_discarded"
}

func (target *HistoryDiscarded) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "history_discarded" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// HistoryResults event.
type HistoryResults struct {
	ChannelId     *string `json:"channel_id,omitempty"`
	HistoryLength int     `json:"history_length"`
	UserId        *string `json:"user_id,omitempty"`
}

func (*HistoryResults) String() string {
	return "history_results"
}

func (target *HistoryResults) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "history_results" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["history_length"]; x != nil {
		if y, ok := x.(int); ok {
			target.HistoryLength = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// IdentityCreated event.
type IdentityCreated struct {
	IdentityAttrs *IdentityAttrs `json:"identity_attrs"`
	IdentityName  string         `json:"identity_name"`
	IdentityType  string         `json:"identity_type"`
}

func (*IdentityCreated) String() string {
	return "identity_created"
}

func (target *IdentityCreated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_created" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["identity_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.IdentityAttrs = new(IdentityAttrs)
			target.IdentityAttrs.init(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	return nil
}

// IdentityDeleted event.
type IdentityDeleted struct {
	IdentityName string `json:"identity_name"`
	IdentityType string `json:"identity_type"`
}

func (*IdentityDeleted) String() string {
	return "identity_deleted"
}

func (target *IdentityDeleted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_deleted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	return nil
}

// IdentityFound event.
type IdentityFound struct {
	IdentityAttrs *IdentityAttrs `json:"identity_attrs,omitempty"`
	IdentityName  string         `json:"identity_name"`
	IdentityType  string         `json:"identity_type"`
	UserId        string         `json:"user_id"`
}

func (*IdentityFound) String() string {
	return "identity_found"
}

func (target *IdentityFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["identity_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.IdentityAttrs = new(IdentityAttrs)
			target.IdentityAttrs.init(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// IdentityUpdated event.
type IdentityUpdated struct {
	IdentityAttrs *IdentityAttrs `json:"identity_attrs"`
	IdentityName  string         `json:"identity_name"`
	IdentityType  string         `json:"identity_type"`
}

func (*IdentityUpdated) String() string {
	return "identity_updated"
}

func (target *IdentityUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["identity_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.IdentityAttrs = new(IdentityAttrs)
			target.IdentityAttrs.init(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	return nil
}

// MasterFound event.
type MasterFound struct {
	MasterKeys *MasterKeys `json:"master_keys"`
}

func (*MasterFound) String() string {
	return "master_found"
}

func (target *MasterFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "master_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["master_keys"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MasterKeys = new(MasterKeys)
			target.MasterKeys.init(y)
		}
	}

	return nil
}

// MasterKeyCreated event.
type MasterKeyCreated struct {
	MasterKeyId     string  `json:"master_key_id"`
	MasterKeySecret *string `json:"master_key_secret,omitempty"`
}

func (*MasterKeyCreated) String() string {
	return "master_key_created"
}

func (target *MasterKeyCreated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "master_key_created" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["master_key_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MasterKeyId = y
		}
	}

	if x := source["master_key_secret"]; x != nil {
		if y, ok := x.(string); ok {
			target.MasterKeySecret = &y
		}
	}

	return nil
}

// MasterKeyDeleted event.
type MasterKeyDeleted struct {
	MasterKeyId string `json:"master_key_id"`
}

func (*MasterKeyDeleted) String() string {
	return "master_key_deleted"
}

func (target *MasterKeyDeleted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "master_key_deleted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["master_key_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MasterKeyId = y
		}
	}

	return nil
}

// MessageReceived event.
type MessageReceived struct {
	ChannelId           *string  `json:"channel_id,omitempty"`
	HistoryLength       *int     `json:"history_length,omitempty"`
	MessageFold         bool     `json:"message_fold,omitempty"`
	MessageHidden       bool     `json:"message_hidden,omitempty"`
	MessageId           string   `json:"message_id"`
	MessageRecipientIds []string `json:"message_recipient_ids,omitempty"`
	MessageTime         float64  `json:"message_time"`
	MessageTtl          *float64 `json:"message_ttl,omitempty"`
	MessageType         string   `json:"message_type"`
	MessageUserId       *string  `json:"message_user_id,omitempty"`
	MessageUserName     *string  `json:"message_user_name,omitempty"`
	UserId              *string  `json:"user_id,omitempty"`
	Payload             [][]byte
}

func (*MessageReceived) String() string {
	return "message_received"
}

func (target *MessageReceived) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "message_received" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["history_length"]; x != nil {
		if y, ok := x.(int); ok {
			target.HistoryLength = &y
		}
	}

	if x := source["message_fold"]; x != nil {
		target.MessageFold = true
	}

	if x := source["message_hidden"]; x != nil {
		target.MessageHidden = true
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	if x := source["message_recipient_ids"]; x != nil {
		if y, ok := x.([]string); ok {
			target.MessageRecipientIds = y
		}
	}

	if x := source["message_time"]; x != nil {
		if y, ok := x.(float64); ok {
			target.MessageTime = y
		}
	}

	if x := source["message_ttl"]; x != nil {
		if y, ok := x.(float64); ok {
			target.MessageTtl = &y
		}
	}

	if x := source["message_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageType = y
		}
	}

	if x := source["message_user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageUserId = &y
		}
	}

	if x := source["message_user_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageUserName = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	target.Payload = clientEvent.Payload

	return nil
}

// MessageUpdated event.
type MessageUpdated struct {
	ChannelId     *string `json:"channel_id,omitempty"`
	MessageHidden bool    `json:"message_hidden,omitempty"`
	MessageId     string  `json:"message_id"`
}

func (*MessageUpdated) String() string {
	return "message_updated"
}

func (target *MessageUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "message_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["message_hidden"]; x != nil {
		target.MessageHidden = true
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	return nil
}

// Pong event.
type Pong struct {
}

func (*Pong) String() string {
	return "pong"
}

func (target *Pong) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "pong" {
		return &EventError{clientEvent}
	}

	return nil
}

// QueueCreated event.
type QueueCreated struct {
	QueueAttrs *QueueAttrs `json:"queue_attrs"`
	QueueId    string      `json:"queue_id"`
	RealmId    *string     `json:"realm_id,omitempty"`
}

func (*QueueCreated) String() string {
	return "queue_created"
}

func (target *QueueCreated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_created" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = new(QueueAttrs)
			target.QueueAttrs.init(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// QueueDeleted event.
type QueueDeleted struct {
	QueueId string  `json:"queue_id"`
	RealmId *string `json:"realm_id,omitempty"`
}

func (*QueueDeleted) String() string {
	return "queue_deleted"
}

func (target *QueueDeleted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_deleted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// QueueFound event.
type QueueFound struct {
	QueueAttrs    *QueueAttrs   `json:"queue_attrs"`
	QueueId       string        `json:"queue_id"`
	QueueMembers  *QueueMembers `json:"queue_members,omitempty"`
	QueuePosition *int          `json:"queue_position,omitempty"`
	RealmId       *string       `json:"realm_id,omitempty"`
}

func (*QueueFound) String() string {
	return "queue_found"
}

func (target *QueueFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = new(QueueAttrs)
			target.QueueAttrs.init(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["queue_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueMembers = new(QueueMembers)
			target.QueueMembers.init(y)
		}
	}

	if x := source["queue_position"]; x != nil {
		if y, ok := x.(int); ok {
			target.QueuePosition = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// QueueJoined event.
type QueueJoined struct {
	QueueAttrs *QueueAttrs `json:"queue_attrs"`
	QueueId    string      `json:"queue_id"`
	RealmId    *string     `json:"realm_id,omitempty"`
}

func (*QueueJoined) String() string {
	return "queue_joined"
}

func (target *QueueJoined) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_joined" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = new(QueueAttrs)
			target.QueueAttrs.init(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// QueueMemberJoined event.
type QueueMemberJoined struct {
	MemberAttrs interface{} `json:"member_attrs"`
	QueueId     string      `json:"queue_id"`
	UserAttrs   *UserAttrs  `json:"user_attrs"`
	UserId      string      `json:"user_id"`
}

func (*QueueMemberJoined) String() string {
	return "queue_member_joined"
}

func (target *QueueMemberJoined) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_member_joined" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = y
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// QueueMemberParted event.
type QueueMemberParted struct {
	QueueId string `json:"queue_id"`
	UserId  string `json:"user_id"`
}

func (*QueueMemberParted) String() string {
	return "queue_member_parted"
}

func (target *QueueMemberParted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_member_parted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// QueueParted event.
type QueueParted struct {
	QueueId string  `json:"queue_id"`
	RealmId *string `json:"realm_id,omitempty"`
}

func (*QueueParted) String() string {
	return "queue_parted"
}

func (target *QueueParted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_parted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// QueueUpdated event.
type QueueUpdated struct {
	QueueAttrs    *QueueAttrs `json:"queue_attrs"`
	QueueId       string      `json:"queue_id"`
	QueuePosition *int        `json:"queue_position,omitempty"`
	RealmId       *string     `json:"realm_id,omitempty"`
}

func (*QueueUpdated) String() string {
	return "queue_updated"
}

func (target *QueueUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = new(QueueAttrs)
			target.QueueAttrs.init(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["queue_position"]; x != nil {
		if y, ok := x.(int); ok {
			target.QueuePosition = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// RealmDeleted event.
type RealmDeleted struct {
	RealmId string `json:"realm_id"`
}

func (*RealmDeleted) String() string {
	return "realm_deleted"
}

func (target *RealmDeleted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_deleted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	return nil
}

// RealmFound event.
type RealmFound struct {
	RealmAttrs   *RealmAttrs   `json:"realm_attrs"`
	RealmId      string        `json:"realm_id"`
	RealmMembers *RealmMembers `json:"realm_members,omitempty"`
}

func (*RealmFound) String() string {
	return "realm_found"
}

func (target *RealmFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = new(RealmAttrs)
			target.RealmAttrs.init(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["realm_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmMembers = new(RealmMembers)
			target.RealmMembers.init(y)
		}
	}

	return nil
}

// RealmJoined event.
type RealmJoined struct {
	RealmAttrs   *RealmAttrs   `json:"realm_attrs"`
	RealmId      string        `json:"realm_id"`
	RealmMembers *RealmMembers `json:"realm_members"`
}

func (*RealmJoined) String() string {
	return "realm_joined"
}

func (target *RealmJoined) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_joined" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = new(RealmAttrs)
			target.RealmAttrs.init(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["realm_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmMembers = new(RealmMembers)
			target.RealmMembers.init(y)
		}
	}

	return nil
}

// RealmMemberJoined event.
type RealmMemberJoined struct {
	MemberAttrs interface{} `json:"member_attrs"`
	RealmId     string      `json:"realm_id"`
	UserAttrs   *UserAttrs  `json:"user_attrs"`
	UserId      string      `json:"user_id"`
}

func (*RealmMemberJoined) String() string {
	return "realm_member_joined"
}

func (target *RealmMemberJoined) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_member_joined" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// RealmMemberParted event.
type RealmMemberParted struct {
	ChannelId *string `json:"channel_id,omitempty"`
	RealmId   *string `json:"realm_id,omitempty"`
	UserId    string  `json:"user_id"`
}

func (*RealmMemberParted) String() string {
	return "realm_member_parted"
}

func (target *RealmMemberParted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_member_parted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// RealmMemberUpdated event.
type RealmMemberUpdated struct {
	MemberAttrs interface{} `json:"member_attrs"`
	RealmId     string      `json:"realm_id"`
	UserId      string      `json:"user_id"`
}

func (*RealmMemberUpdated) String() string {
	return "realm_member_updated"
}

func (target *RealmMemberUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_member_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// RealmParted event.
type RealmParted struct {
	RealmId string `json:"realm_id"`
}

func (*RealmParted) String() string {
	return "realm_parted"
}

func (target *RealmParted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_parted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	return nil
}

// RealmQueuesFound event.
type RealmQueuesFound struct {
	RealmId     string       `json:"realm_id"`
	RealmQueues *RealmQueues `json:"realm_queues"`
}

func (*RealmQueuesFound) String() string {
	return "realm_queues_found"
}

func (target *RealmQueuesFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_queues_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["realm_queues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmQueues = new(RealmQueues)
			target.RealmQueues.init(y)
		}
	}

	return nil
}

// RealmUpdated event.
type RealmUpdated struct {
	RealmAttrs *RealmAttrs `json:"realm_attrs"`
	RealmId    string      `json:"realm_id"`
}

func (*RealmUpdated) String() string {
	return "realm_updated"
}

func (target *RealmUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = new(RealmAttrs)
			target.RealmAttrs.init(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	return nil
}

// SearchResults event.
type SearchResults struct {
	Channels *Channels `json:"channels,omitempty"`
	Users    *Users    `json:"users,omitempty"`
}

func (*SearchResults) String() string {
	return "search_results"
}

func (target *SearchResults) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "search_results" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channels"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.Channels = new(Channels)
			target.Channels.init(y)
		}
	}

	if x := source["users"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.Users = new(Users)
			target.Users.init(y)
		}
	}

	return nil
}

// SessionCreated event.
type SessionCreated struct {
	SessionHost      *string                `json:"session_host,omitempty"`
	SessionId        string                 `json:"session_id"`
	UserAccount      *UserAccount           `json:"user_account"`
	UserAttrs        *UserAttrs             `json:"user_attrs"`
	UserAuth         *string                `json:"user_auth,omitempty"`
	UserChannels     *UserChannels          `json:"user_channels"`
	UserDialogues    *UserDialogues         `json:"user_dialogues"`
	UserId           string                 `json:"user_id"`
	UserIdentities   *UserIdentities        `json:"user_identities"`
	UserQueues       *UserQueues            `json:"user_queues,omitempty"`
	UserRealms       *UserRealms            `json:"user_realms"`
	UserRealmsMember *UserRealmsMember      `json:"user_realms_member,omitempty"`
	UserSettings     map[string]interface{} `json:"user_settings"`
}

func (*SessionCreated) String() string {
	return "session_created"
}

func (target *SessionCreated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "session_created" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["session_host"]; x != nil {
		if y, ok := x.(string); ok {
			target.SessionHost = &y
		}
	}

	if x := source["session_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.SessionId = y
		}
	}

	if x := source["user_account"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAccount = new(UserAccount)
			target.UserAccount.init(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_auth"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserAuth = &y
		}
	}

	if x := source["user_channels"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserChannels = new(UserChannels)
			target.UserChannels.init(y)
		}
	}

	if x := source["user_dialogues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserDialogues = new(UserDialogues)
			target.UserDialogues.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	if x := source["user_identities"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserIdentities = new(UserIdentities)
			target.UserIdentities.init(y)
		}
	}

	if x := source["user_queues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserQueues = new(UserQueues)
			target.UserQueues.init(y)
		}
	}

	if x := source["user_realms"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealms = new(UserRealms)
			target.UserRealms.init(y)
		}
	}

	if x := source["user_realms_member"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealmsMember = new(UserRealmsMember)
			target.UserRealmsMember.init(y)
		}
	}

	if x := source["user_settings"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserSettings = y
		}
	}

	return nil
}

// SessionStatusUpdated event.
type SessionStatusUpdated struct {
	ChannelId *string `json:"channel_id,omitempty"`
	MessageId string  `json:"message_id"`
	UserId    *string `json:"user_id,omitempty"`
}

func (*SessionStatusUpdated) String() string {
	return "session_status_updated"
}

func (target *SessionStatusUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "session_status_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// UserDeleted event.
type UserDeleted struct {
	UserId string `json:"user_id"`
}

func (*UserDeleted) String() string {
	return "user_deleted"
}

func (target *UserDeleted) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "user_deleted" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// UserFound event.
type UserFound struct {
	AudienceMetadata map[string]interface{} `json:"audience_metadata,omitempty"`
	DialogueMembers  *DialogueMembers       `json:"dialogue_members,omitempty"`
	DialogueStatus   *string                `json:"dialogue_status,omitempty"`
	UserAccount      *UserAccount           `json:"user_account,omitempty"`
	UserAttrs        *UserAttrs             `json:"user_attrs"`
	UserChannels     *UserChannels          `json:"user_channels,omitempty"`
	UserDialogues    *UserDialogues         `json:"user_dialogues,omitempty"`
	UserId           string                 `json:"user_id"`
	UserIdentities   *UserIdentities        `json:"user_identities"`
	UserQueues       *UserQueues            `json:"user_queues,omitempty"`
	UserRealms       *UserRealms            `json:"user_realms,omitempty"`
	UserRealmsMember *UserRealmsMember      `json:"user_realms_member,omitempty"`
	UserSettings     map[string]interface{} `json:"user_settings,omitempty"`
}

func (*UserFound) String() string {
	return "user_found"
}

func (target *UserFound) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "user_found" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["audience_metadata"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.AudienceMetadata = y
		}
	}

	if x := source["dialogue_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.DialogueMembers = new(DialogueMembers)
			target.DialogueMembers.init(y)
		}
	}

	if x := source["dialogue_status"]; x != nil {
		if y, ok := x.(string); ok {
			target.DialogueStatus = &y
		}
	}

	if x := source["user_account"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAccount = new(UserAccount)
			target.UserAccount.init(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_channels"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserChannels = new(UserChannels)
			target.UserChannels.init(y)
		}
	}

	if x := source["user_dialogues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserDialogues = new(UserDialogues)
			target.UserDialogues.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	if x := source["user_identities"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserIdentities = new(UserIdentities)
			target.UserIdentities.init(y)
		}
	}

	if x := source["user_queues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserQueues = new(UserQueues)
			target.UserQueues.init(y)
		}
	}

	if x := source["user_realms"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealms = new(UserRealms)
			target.UserRealms.init(y)
		}
	}

	if x := source["user_realms_member"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealmsMember = new(UserRealmsMember)
			target.UserRealmsMember.init(y)
		}
	}

	if x := source["user_settings"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserSettings = y
		}
	}

	return nil
}

// UserUpdated event.
type UserUpdated struct {
	UserAccount  *UserAccount           `json:"user_account,omitempty"`
	UserAttrs    *UserAttrs             `json:"user_attrs"`
	UserId       string                 `json:"user_id"`
	UserSettings map[string]interface{} `json:"user_settings,omitempty"`
}

func (*UserUpdated) String() string {
	return "user_updated"
}

func (target *UserUpdated) init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "user_updated" {
		return &EventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["user_account"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAccount = new(UserAccount)
			target.UserAccount.init(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = new(UserAttrs)
			target.UserAttrs.init(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	if x := source["user_settings"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserSettings = y
		}
	}

	return nil
}
