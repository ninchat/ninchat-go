package ninchatapi

// THIS FILE IS AUTO-GENERATED BY generate.py - DO NOT EDIT BY HAND!

import (
	"github.com/ninchat/ninchat-go"
)

// AccessCreated event.  https://ninchat.com/api/v2#access_created
type AccessCreated struct {
	AccessKey  *string `json:"access_key,omitempty"`
	AccessType string  `json:"access_type"`
	EventId    int     `json:"event_id,omitempty"`
}

// NewAccessCreated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "access_created".
func NewAccessCreated(clientEvent *ninchat.Event) (event *AccessCreated, err error) {
	if clientEvent != nil {
		e := new(AccessCreated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "access_created".
func (target *AccessCreated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "access_created" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["access_key"]; x != nil {
		if y, ok := x.(string); ok {
			target.AccessKey = &y
		}
	}

	if x := source["access_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.AccessType = y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *AccessCreated) Id() int {
	return event.EventId
}

// String returns "access_created".
func (*AccessCreated) String() string {
	return "access_created"
}

// AccessFound event.  https://ninchat.com/api/v2#access_found
type AccessFound struct {
	AccessType   string        `json:"access_type"`
	ChannelAttrs *ChannelAttrs `json:"channel_attrs,omitempty"`
	ChannelId    *string       `json:"channel_id,omitempty"`
	EventId      int           `json:"event_id,omitempty"`
	IdentityName *string       `json:"identity_name,omitempty"`
	IdentityType *string       `json:"identity_type,omitempty"`
	RealmAttrs   *RealmAttrs   `json:"realm_attrs,omitempty"`
	RealmId      *string       `json:"realm_id,omitempty"`
	RealmMember  bool          `json:"realm_member,omitempty"`
	UserAttrs    *UserAttrs    `json:"user_attrs,omitempty"`
	UserId       *string       `json:"user_id,omitempty"`
}

// NewAccessFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "access_found".
func NewAccessFound(clientEvent *ninchat.Event) (event *AccessFound, err error) {
	if clientEvent != nil {
		e := new(AccessFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "access_found".
func (target *AccessFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "access_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["access_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.AccessType = y
		}
	}

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = NewChannelAttrs(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = &y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = &y
		}
	}

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = NewRealmAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["realm_member"]; x != nil {
		target.RealmMember = true
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *AccessFound) Id() int {
	return event.EventId
}

// String returns "access_found".
func (*AccessFound) String() string {
	return "access_found"
}

// AudienceEnqueued event.  https://ninchat.com/api/v2#audience_enqueued
type AudienceEnqueued struct {
	EventId       int         `json:"event_id,omitempty"`
	QueueAttrs    *QueueAttrs `json:"queue_attrs"`
	QueueId       string      `json:"queue_id"`
	QueuePosition int         `json:"queue_position"`
}

// NewAudienceEnqueued creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "audience_enqueued".
func NewAudienceEnqueued(clientEvent *ninchat.Event) (event *AudienceEnqueued, err error) {
	if clientEvent != nil {
		e := new(AudienceEnqueued)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "audience_enqueued".
func (target *AudienceEnqueued) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "audience_enqueued" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = NewQueueAttrs(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["queue_position"]; x != nil {
		if y, ok := x.(float64); ok {
			target.QueuePosition = int(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *AudienceEnqueued) Id() int {
	return event.EventId
}

// String returns "audience_enqueued".
func (*AudienceEnqueued) String() string {
	return "audience_enqueued"
}

// ChannelDeleted event.  https://ninchat.com/api/v2#channel_deleted
type ChannelDeleted struct {
	ChannelId string `json:"channel_id"`
	EventId   int    `json:"event_id,omitempty"`
}

// NewChannelDeleted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_deleted".
func NewChannelDeleted(clientEvent *ninchat.Event) (event *ChannelDeleted, err error) {
	if clientEvent != nil {
		e := new(ChannelDeleted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_deleted".
func (target *ChannelDeleted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_deleted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelDeleted) Id() int {
	return event.EventId
}

// String returns "channel_deleted".
func (*ChannelDeleted) String() string {
	return "channel_deleted"
}

// ChannelFound event.  https://ninchat.com/api/v2#channel_found
type ChannelFound struct {
	ChannelAttrs   *ChannelAttrs             `json:"channel_attrs"`
	ChannelId      string                    `json:"channel_id"`
	ChannelMembers map[string]*ChannelMember `json:"channel_members,omitempty"`
	ChannelStatus  *string                   `json:"channel_status,omitempty"`
	EventId        int                       `json:"event_id,omitempty"`
	RealmId        *string                   `json:"realm_id,omitempty"`
}

// NewChannelFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_found".
func NewChannelFound(clientEvent *ninchat.Event) (event *ChannelFound, err error) {
	if clientEvent != nil {
		e := new(ChannelFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_found".
func (target *ChannelFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = NewChannelAttrs(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["channel_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelMembers = MakeChannelMembers(y)
		}
	}

	if x := source["channel_status"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelStatus = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelFound) Id() int {
	return event.EventId
}

// String returns "channel_found".
func (*ChannelFound) String() string {
	return "channel_found"
}

// ChannelJoined event.  https://ninchat.com/api/v2#channel_joined
type ChannelJoined struct {
	ChannelAttrs   *ChannelAttrs             `json:"channel_attrs"`
	ChannelId      string                    `json:"channel_id"`
	ChannelMembers map[string]*ChannelMember `json:"channel_members"`
	EventId        int                       `json:"event_id,omitempty"`
	RealmId        *string                   `json:"realm_id,omitempty"`
}

// NewChannelJoined creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_joined".
func NewChannelJoined(clientEvent *ninchat.Event) (event *ChannelJoined, err error) {
	if clientEvent != nil {
		e := new(ChannelJoined)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_joined".
func (target *ChannelJoined) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_joined" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = NewChannelAttrs(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["channel_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelMembers = MakeChannelMembers(y)
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelJoined) Id() int {
	return event.EventId
}

// String returns "channel_joined".
func (*ChannelJoined) String() string {
	return "channel_joined"
}

// ChannelMemberJoined event.  https://ninchat.com/api/v2#channel_member_joined
type ChannelMemberJoined struct {
	ChannelId   string              `json:"channel_id"`
	EventId     int                 `json:"event_id,omitempty"`
	MemberAttrs *ChannelMemberAttrs `json:"member_attrs"`
	UserAttrs   *UserAttrs          `json:"user_attrs"`
	UserId      string              `json:"user_id"`
}

// NewChannelMemberJoined creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_member_joined".
func NewChannelMemberJoined(clientEvent *ninchat.Event) (event *ChannelMemberJoined, err error) {
	if clientEvent != nil {
		e := new(ChannelMemberJoined)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_member_joined".
func (target *ChannelMemberJoined) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_member_joined" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = NewChannelMemberAttrs(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelMemberJoined) Id() int {
	return event.EventId
}

// String returns "channel_member_joined".
func (*ChannelMemberJoined) String() string {
	return "channel_member_joined"
}

// ChannelMemberParted event.  https://ninchat.com/api/v2#channel_member_parted
type ChannelMemberParted struct {
	ChannelId *string `json:"channel_id,omitempty"`
	EventId   int     `json:"event_id,omitempty"`
	RealmId   *string `json:"realm_id,omitempty"`
	UserId    string  `json:"user_id"`
}

// NewChannelMemberParted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_member_parted".
func NewChannelMemberParted(clientEvent *ninchat.Event) (event *ChannelMemberParted, err error) {
	if clientEvent != nil {
		e := new(ChannelMemberParted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_member_parted".
func (target *ChannelMemberParted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_member_parted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelMemberParted) Id() int {
	return event.EventId
}

// String returns "channel_member_parted".
func (*ChannelMemberParted) String() string {
	return "channel_member_parted"
}

// ChannelMemberUpdated event.  https://ninchat.com/api/v2#channel_member_updated
type ChannelMemberUpdated struct {
	ChannelId   *string             `json:"channel_id,omitempty"`
	EventId     int                 `json:"event_id,omitempty"`
	MemberAttrs *ChannelMemberAttrs `json:"member_attrs"`
	RealmId     *string             `json:"realm_id,omitempty"`
	UserId      string              `json:"user_id"`
}

// NewChannelMemberUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_member_updated".
func NewChannelMemberUpdated(clientEvent *ninchat.Event) (event *ChannelMemberUpdated, err error) {
	if clientEvent != nil {
		e := new(ChannelMemberUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_member_updated".
func (target *ChannelMemberUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_member_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = NewChannelMemberAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelMemberUpdated) Id() int {
	return event.EventId
}

// String returns "channel_member_updated".
func (*ChannelMemberUpdated) String() string {
	return "channel_member_updated"
}

// ChannelParted event.  https://ninchat.com/api/v2#channel_parted
type ChannelParted struct {
	ChannelId string `json:"channel_id"`
	EventId   int    `json:"event_id,omitempty"`
}

// NewChannelParted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_parted".
func NewChannelParted(clientEvent *ninchat.Event) (event *ChannelParted, err error) {
	if clientEvent != nil {
		e := new(ChannelParted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_parted".
func (target *ChannelParted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_parted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelParted) Id() int {
	return event.EventId
}

// String returns "channel_parted".
func (*ChannelParted) String() string {
	return "channel_parted"
}

// ChannelUpdated event.  https://ninchat.com/api/v2#channel_updated
type ChannelUpdated struct {
	ChannelAttrs *ChannelAttrs `json:"channel_attrs"`
	ChannelId    string        `json:"channel_id"`
	EventId      int           `json:"event_id,omitempty"`
	RealmId      *string       `json:"realm_id,omitempty"`
}

// NewChannelUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "channel_updated".
func NewChannelUpdated(clientEvent *ninchat.Event) (event *ChannelUpdated, err error) {
	if clientEvent != nil {
		e := new(ChannelUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "channel_updated".
func (target *ChannelUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "channel_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.ChannelAttrs = NewChannelAttrs(y)
		}
	}

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *ChannelUpdated) Id() int {
	return event.EventId
}

// String returns "channel_updated".
func (*ChannelUpdated) String() string {
	return "channel_updated"
}

// DialogueUpdated event.  https://ninchat.com/api/v2#dialogue_updated
type DialogueUpdated struct {
	AudienceMetadata map[string]string               `json:"audience_metadata,omitempty"`
	DialogueMembers  map[string]*DialogueMemberAttrs `json:"dialogue_members"`
	DialogueStatus   *string                         `json:"dialogue_status,omitempty"`
	EventId          int                             `json:"event_id,omitempty"`
	UserId           string                          `json:"user_id"`
}

// NewDialogueUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "dialogue_updated".
func NewDialogueUpdated(clientEvent *ninchat.Event) (event *DialogueUpdated, err error) {
	if clientEvent != nil {
		e := new(DialogueUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "dialogue_updated".
func (target *DialogueUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "dialogue_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["audience_metadata"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.AudienceMetadata = MakeStrings(y)
		}
	}

	if x := source["dialogue_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.DialogueMembers = MakeDialogueMembers(y)
		}
	}

	if x := source["dialogue_status"]; x != nil {
		if y, ok := x.(string); ok {
			target.DialogueStatus = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *DialogueUpdated) Id() int {
	return event.EventId
}

// String returns "dialogue_updated".
func (*DialogueUpdated) String() string {
	return "dialogue_updated"
}

// Error event.  https://ninchat.com/api/v2#error
type Error struct {
	ChannelId    *string `json:"channel_id,omitempty"`
	ErrorReason  *string `json:"error_reason,omitempty"`
	ErrorType    string  `json:"error_type"`
	EventId      int     `json:"event_id,omitempty"`
	IdentityName *string `json:"identity_name,omitempty"`
	IdentityType *string `json:"identity_type,omitempty"`
	MessageType  *string `json:"message_type,omitempty"`
	QueueId      *string `json:"queue_id,omitempty"`
	RealmId      *string `json:"realm_id,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
}

// NewError creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "error".
func NewError(clientEvent *ninchat.Event) (event *Error, err error) {
	if clientEvent != nil {
		e := new(Error)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "error".
func (target *Error) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "error" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["error_reason"]; x != nil {
		if y, ok := x.(string); ok {
			target.ErrorReason = &y
		}
	}

	if x := source["error_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.ErrorType = y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = &y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = &y
		}
	}

	if x := source["message_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageType = &y
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = &y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *Error) Id() int {
	return event.EventId
}

// String returns "error".
func (*Error) String() string {
	return "error"
}

// HistoryDiscarded event.  https://ninchat.com/api/v2#history_discarded
type HistoryDiscarded struct {
	ChannelId *string `json:"channel_id,omitempty"`
	EventId   int     `json:"event_id,omitempty"`
	MessageId string  `json:"message_id"`
	UserId    *string `json:"user_id,omitempty"`
}

// NewHistoryDiscarded creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "history_discarded".
func NewHistoryDiscarded(clientEvent *ninchat.Event) (event *HistoryDiscarded, err error) {
	if clientEvent != nil {
		e := new(HistoryDiscarded)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "history_discarded".
func (target *HistoryDiscarded) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "history_discarded" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *HistoryDiscarded) Id() int {
	return event.EventId
}

// String returns "history_discarded".
func (*HistoryDiscarded) String() string {
	return "history_discarded"
}

// HistoryResults event.  https://ninchat.com/api/v2#history_results
type HistoryResults struct {
	ChannelId     *string `json:"channel_id,omitempty"`
	EventId       int     `json:"event_id,omitempty"`
	HistoryLength int     `json:"history_length"`
	UserId        *string `json:"user_id,omitempty"`
}

// NewHistoryResults creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "history_results".
func NewHistoryResults(clientEvent *ninchat.Event) (event *HistoryResults, err error) {
	if clientEvent != nil {
		e := new(HistoryResults)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "history_results".
func (target *HistoryResults) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "history_results" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["history_length"]; x != nil {
		if y, ok := x.(float64); ok {
			target.HistoryLength = int(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *HistoryResults) Id() int {
	return event.EventId
}

// String returns "history_results".
func (*HistoryResults) String() string {
	return "history_results"
}

// IdentityCreated event.  https://ninchat.com/api/v2#identity_created
type IdentityCreated struct {
	EventId       int            `json:"event_id,omitempty"`
	IdentityAttrs *IdentityAttrs `json:"identity_attrs"`
	IdentityName  string         `json:"identity_name"`
	IdentityType  string         `json:"identity_type"`
}

// NewIdentityCreated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "identity_created".
func NewIdentityCreated(clientEvent *ninchat.Event) (event *IdentityCreated, err error) {
	if clientEvent != nil {
		e := new(IdentityCreated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "identity_created".
func (target *IdentityCreated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_created" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["identity_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.IdentityAttrs = NewIdentityAttrs(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *IdentityCreated) Id() int {
	return event.EventId
}

// String returns "identity_created".
func (*IdentityCreated) String() string {
	return "identity_created"
}

// IdentityDeleted event.  https://ninchat.com/api/v2#identity_deleted
type IdentityDeleted struct {
	EventId      int    `json:"event_id,omitempty"`
	IdentityName string `json:"identity_name"`
	IdentityType string `json:"identity_type"`
}

// NewIdentityDeleted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "identity_deleted".
func NewIdentityDeleted(clientEvent *ninchat.Event) (event *IdentityDeleted, err error) {
	if clientEvent != nil {
		e := new(IdentityDeleted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "identity_deleted".
func (target *IdentityDeleted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_deleted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *IdentityDeleted) Id() int {
	return event.EventId
}

// String returns "identity_deleted".
func (*IdentityDeleted) String() string {
	return "identity_deleted"
}

// IdentityFound event.  https://ninchat.com/api/v2#identity_found
type IdentityFound struct {
	EventId       int            `json:"event_id,omitempty"`
	IdentityAttrs *IdentityAttrs `json:"identity_attrs,omitempty"`
	IdentityName  string         `json:"identity_name"`
	IdentityType  string         `json:"identity_type"`
	UserId        string         `json:"user_id"`
}

// NewIdentityFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "identity_found".
func NewIdentityFound(clientEvent *ninchat.Event) (event *IdentityFound, err error) {
	if clientEvent != nil {
		e := new(IdentityFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "identity_found".
func (target *IdentityFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["identity_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.IdentityAttrs = NewIdentityAttrs(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *IdentityFound) Id() int {
	return event.EventId
}

// String returns "identity_found".
func (*IdentityFound) String() string {
	return "identity_found"
}

// IdentityUpdated event.  https://ninchat.com/api/v2#identity_updated
type IdentityUpdated struct {
	EventId       int            `json:"event_id,omitempty"`
	IdentityAttrs *IdentityAttrs `json:"identity_attrs"`
	IdentityName  string         `json:"identity_name"`
	IdentityType  string         `json:"identity_type"`
}

// NewIdentityUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "identity_updated".
func NewIdentityUpdated(clientEvent *ninchat.Event) (event *IdentityUpdated, err error) {
	if clientEvent != nil {
		e := new(IdentityUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "identity_updated".
func (target *IdentityUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "identity_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["identity_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.IdentityAttrs = NewIdentityAttrs(y)
		}
	}

	if x := source["identity_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityName = y
		}
	}

	if x := source["identity_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.IdentityType = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *IdentityUpdated) Id() int {
	return event.EventId
}

// String returns "identity_updated".
func (*IdentityUpdated) String() string {
	return "identity_updated"
}

// MasterFound event.  https://ninchat.com/api/v2#master_found
type MasterFound struct {
	EventId    int                   `json:"event_id,omitempty"`
	MasterKeys map[string]*MasterKey `json:"master_keys"`
}

// NewMasterFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "master_found".
func NewMasterFound(clientEvent *ninchat.Event) (event *MasterFound, err error) {
	if clientEvent != nil {
		e := new(MasterFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "master_found".
func (target *MasterFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "master_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["master_keys"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MasterKeys = MakeMasterKeys(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *MasterFound) Id() int {
	return event.EventId
}

// String returns "master_found".
func (*MasterFound) String() string {
	return "master_found"
}

// MasterKeyCreated event.  https://ninchat.com/api/v2#master_key_created
type MasterKeyCreated struct {
	EventId         int     `json:"event_id,omitempty"`
	MasterKeyId     string  `json:"master_key_id"`
	MasterKeySecret *string `json:"master_key_secret,omitempty"`
}

// NewMasterKeyCreated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "master_key_created".
func NewMasterKeyCreated(clientEvent *ninchat.Event) (event *MasterKeyCreated, err error) {
	if clientEvent != nil {
		e := new(MasterKeyCreated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "master_key_created".
func (target *MasterKeyCreated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "master_key_created" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["master_key_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MasterKeyId = y
		}
	}

	if x := source["master_key_secret"]; x != nil {
		if y, ok := x.(string); ok {
			target.MasterKeySecret = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *MasterKeyCreated) Id() int {
	return event.EventId
}

// String returns "master_key_created".
func (*MasterKeyCreated) String() string {
	return "master_key_created"
}

// MasterKeyDeleted event.  https://ninchat.com/api/v2#master_key_deleted
type MasterKeyDeleted struct {
	EventId     int    `json:"event_id,omitempty"`
	MasterKeyId string `json:"master_key_id"`
}

// NewMasterKeyDeleted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "master_key_deleted".
func NewMasterKeyDeleted(clientEvent *ninchat.Event) (event *MasterKeyDeleted, err error) {
	if clientEvent != nil {
		e := new(MasterKeyDeleted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "master_key_deleted".
func (target *MasterKeyDeleted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "master_key_deleted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["master_key_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MasterKeyId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *MasterKeyDeleted) Id() int {
	return event.EventId
}

// String returns "master_key_deleted".
func (*MasterKeyDeleted) String() string {
	return "master_key_deleted"
}

// MessageReceived event.  https://ninchat.com/api/v2#message_received
type MessageReceived struct {
	ChannelId           *string  `json:"channel_id,omitempty"`
	EventId             int      `json:"event_id,omitempty"`
	HistoryLength       *int     `json:"history_length,omitempty"`
	MessageFold         bool     `json:"message_fold,omitempty"`
	MessageHidden       bool     `json:"message_hidden,omitempty"`
	MessageId           string   `json:"message_id"`
	MessageRecipientIds []string `json:"message_recipient_ids,omitempty"`
	MessageTime         float64  `json:"message_time"`
	MessageTtl          *float64 `json:"message_ttl,omitempty"`
	MessageType         string   `json:"message_type"`
	MessageUserId       *string  `json:"message_user_id,omitempty"`
	MessageUserName     *string  `json:"message_user_name,omitempty"`
	UserId              *string  `json:"user_id,omitempty"`
	Payload             [][]byte
}

// NewMessageReceived creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "message_received".
func NewMessageReceived(clientEvent *ninchat.Event) (event *MessageReceived, err error) {
	if clientEvent != nil {
		e := new(MessageReceived)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "message_received".
func (target *MessageReceived) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "message_received" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["history_length"]; x != nil {
		if y, ok := x.(float64); ok {
			target.HistoryLength = intPointer(y)
		}
	}

	if x := source["message_fold"]; x != nil {
		target.MessageFold = true
	}

	if x := source["message_hidden"]; x != nil {
		target.MessageHidden = true
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	if x := source["message_recipient_ids"]; x != nil {
		if y, ok := x.([]interface{}); ok {
			target.MessageRecipientIds = AppendStrings(nil, y)
		}
	}

	if x := source["message_time"]; x != nil {
		if y, ok := x.(float64); ok {
			target.MessageTime = y
		}
	}

	if x := source["message_ttl"]; x != nil {
		if y, ok := x.(float64); ok {
			target.MessageTtl = &y
		}
	}

	if x := source["message_type"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageType = y
		}
	}

	if x := source["message_user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageUserId = &y
		}
	}

	if x := source["message_user_name"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageUserName = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	target.Payload = clientEvent.Payload

	return nil
}

// Id returns the EventId parameter.
func (event *MessageReceived) Id() int {
	return event.EventId
}

// String returns "message_received".
func (*MessageReceived) String() string {
	return "message_received"
}

// MessageUpdated event.  https://ninchat.com/api/v2#message_updated
type MessageUpdated struct {
	ChannelId     *string `json:"channel_id,omitempty"`
	EventId       int     `json:"event_id,omitempty"`
	MessageHidden bool    `json:"message_hidden,omitempty"`
	MessageId     string  `json:"message_id"`
}

// NewMessageUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "message_updated".
func NewMessageUpdated(clientEvent *ninchat.Event) (event *MessageUpdated, err error) {
	if clientEvent != nil {
		e := new(MessageUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "message_updated".
func (target *MessageUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "message_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["message_hidden"]; x != nil {
		target.MessageHidden = true
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *MessageUpdated) Id() int {
	return event.EventId
}

// String returns "message_updated".
func (*MessageUpdated) String() string {
	return "message_updated"
}

// Pong event.  https://ninchat.com/api/v2#pong
type Pong struct {
	EventId int `json:"event_id,omitempty"`
}

// NewPong creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "pong".
func NewPong(clientEvent *ninchat.Event) (event *Pong, err error) {
	if clientEvent != nil {
		e := new(Pong)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "pong".
func (target *Pong) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "pong" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *Pong) Id() int {
	return event.EventId
}

// String returns "pong".
func (*Pong) String() string {
	return "pong"
}

// QueueCreated event.  https://ninchat.com/api/v2#queue_created
type QueueCreated struct {
	EventId    int         `json:"event_id,omitempty"`
	QueueAttrs *QueueAttrs `json:"queue_attrs"`
	QueueId    string      `json:"queue_id"`
	RealmId    *string     `json:"realm_id,omitempty"`
}

// NewQueueCreated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_created".
func NewQueueCreated(clientEvent *ninchat.Event) (event *QueueCreated, err error) {
	if clientEvent != nil {
		e := new(QueueCreated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_created".
func (target *QueueCreated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_created" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = NewQueueAttrs(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueCreated) Id() int {
	return event.EventId
}

// String returns "queue_created".
func (*QueueCreated) String() string {
	return "queue_created"
}

// QueueDeleted event.  https://ninchat.com/api/v2#queue_deleted
type QueueDeleted struct {
	EventId int     `json:"event_id,omitempty"`
	QueueId string  `json:"queue_id"`
	RealmId *string `json:"realm_id,omitempty"`
}

// NewQueueDeleted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_deleted".
func NewQueueDeleted(clientEvent *ninchat.Event) (event *QueueDeleted, err error) {
	if clientEvent != nil {
		e := new(QueueDeleted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_deleted".
func (target *QueueDeleted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_deleted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueDeleted) Id() int {
	return event.EventId
}

// String returns "queue_deleted".
func (*QueueDeleted) String() string {
	return "queue_deleted"
}

// QueueFound event.  https://ninchat.com/api/v2#queue_found
type QueueFound struct {
	EventId       int                     `json:"event_id,omitempty"`
	QueueAttrs    *QueueAttrs             `json:"queue_attrs"`
	QueueId       string                  `json:"queue_id"`
	QueueMembers  map[string]*QueueMember `json:"queue_members,omitempty"`
	QueuePosition *int                    `json:"queue_position,omitempty"`
	RealmId       *string                 `json:"realm_id,omitempty"`
}

// NewQueueFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_found".
func NewQueueFound(clientEvent *ninchat.Event) (event *QueueFound, err error) {
	if clientEvent != nil {
		e := new(QueueFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_found".
func (target *QueueFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = NewQueueAttrs(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["queue_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueMembers = MakeQueueMembers(y)
		}
	}

	if x := source["queue_position"]; x != nil {
		if y, ok := x.(float64); ok {
			target.QueuePosition = intPointer(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueFound) Id() int {
	return event.EventId
}

// String returns "queue_found".
func (*QueueFound) String() string {
	return "queue_found"
}

// QueueJoined event.  https://ninchat.com/api/v2#queue_joined
type QueueJoined struct {
	EventId    int         `json:"event_id,omitempty"`
	QueueAttrs *QueueAttrs `json:"queue_attrs"`
	QueueId    string      `json:"queue_id"`
	RealmId    *string     `json:"realm_id,omitempty"`
}

// NewQueueJoined creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_joined".
func NewQueueJoined(clientEvent *ninchat.Event) (event *QueueJoined, err error) {
	if clientEvent != nil {
		e := new(QueueJoined)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_joined".
func (target *QueueJoined) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_joined" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = NewQueueAttrs(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueJoined) Id() int {
	return event.EventId
}

// String returns "queue_joined".
func (*QueueJoined) String() string {
	return "queue_joined"
}

// QueueMemberJoined event.  https://ninchat.com/api/v2#queue_member_joined
type QueueMemberJoined struct {
	EventId     int               `json:"event_id,omitempty"`
	MemberAttrs *QueueMemberAttrs `json:"member_attrs"`
	QueueId     string            `json:"queue_id"`
	UserAttrs   *UserAttrs        `json:"user_attrs"`
	UserId      string            `json:"user_id"`
}

// NewQueueMemberJoined creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_member_joined".
func NewQueueMemberJoined(clientEvent *ninchat.Event) (event *QueueMemberJoined, err error) {
	if clientEvent != nil {
		e := new(QueueMemberJoined)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_member_joined".
func (target *QueueMemberJoined) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_member_joined" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = NewQueueMemberAttrs(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueMemberJoined) Id() int {
	return event.EventId
}

// String returns "queue_member_joined".
func (*QueueMemberJoined) String() string {
	return "queue_member_joined"
}

// QueueMemberParted event.  https://ninchat.com/api/v2#queue_member_parted
type QueueMemberParted struct {
	EventId int    `json:"event_id,omitempty"`
	QueueId string `json:"queue_id"`
	UserId  string `json:"user_id"`
}

// NewQueueMemberParted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_member_parted".
func NewQueueMemberParted(clientEvent *ninchat.Event) (event *QueueMemberParted, err error) {
	if clientEvent != nil {
		e := new(QueueMemberParted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_member_parted".
func (target *QueueMemberParted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_member_parted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueMemberParted) Id() int {
	return event.EventId
}

// String returns "queue_member_parted".
func (*QueueMemberParted) String() string {
	return "queue_member_parted"
}

// QueueParted event.  https://ninchat.com/api/v2#queue_parted
type QueueParted struct {
	EventId int     `json:"event_id,omitempty"`
	QueueId string  `json:"queue_id"`
	RealmId *string `json:"realm_id,omitempty"`
}

// NewQueueParted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_parted".
func NewQueueParted(clientEvent *ninchat.Event) (event *QueueParted, err error) {
	if clientEvent != nil {
		e := new(QueueParted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_parted".
func (target *QueueParted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_parted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueParted) Id() int {
	return event.EventId
}

// String returns "queue_parted".
func (*QueueParted) String() string {
	return "queue_parted"
}

// QueueUpdated event.  https://ninchat.com/api/v2#queue_updated
type QueueUpdated struct {
	EventId       int         `json:"event_id,omitempty"`
	QueueAttrs    *QueueAttrs `json:"queue_attrs"`
	QueueId       string      `json:"queue_id"`
	QueuePosition *int        `json:"queue_position,omitempty"`
	RealmId       *string     `json:"realm_id,omitempty"`
}

// NewQueueUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "queue_updated".
func NewQueueUpdated(clientEvent *ninchat.Event) (event *QueueUpdated, err error) {
	if clientEvent != nil {
		e := new(QueueUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "queue_updated".
func (target *QueueUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "queue_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["queue_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.QueueAttrs = NewQueueAttrs(y)
		}
	}

	if x := source["queue_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.QueueId = y
		}
	}

	if x := source["queue_position"]; x != nil {
		if y, ok := x.(float64); ok {
			target.QueuePosition = intPointer(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *QueueUpdated) Id() int {
	return event.EventId
}

// String returns "queue_updated".
func (*QueueUpdated) String() string {
	return "queue_updated"
}

// RealmDeleted event.  https://ninchat.com/api/v2#realm_deleted
type RealmDeleted struct {
	EventId int    `json:"event_id,omitempty"`
	RealmId string `json:"realm_id"`
}

// NewRealmDeleted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_deleted".
func NewRealmDeleted(clientEvent *ninchat.Event) (event *RealmDeleted, err error) {
	if clientEvent != nil {
		e := new(RealmDeleted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_deleted".
func (target *RealmDeleted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_deleted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmDeleted) Id() int {
	return event.EventId
}

// String returns "realm_deleted".
func (*RealmDeleted) String() string {
	return "realm_deleted"
}

// RealmFound event.  https://ninchat.com/api/v2#realm_found
type RealmFound struct {
	EventId      int                     `json:"event_id,omitempty"`
	RealmAttrs   *RealmAttrs             `json:"realm_attrs"`
	RealmId      string                  `json:"realm_id"`
	RealmMembers map[string]*RealmMember `json:"realm_members,omitempty"`
}

// NewRealmFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_found".
func NewRealmFound(clientEvent *ninchat.Event) (event *RealmFound, err error) {
	if clientEvent != nil {
		e := new(RealmFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_found".
func (target *RealmFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = NewRealmAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["realm_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmMembers = MakeRealmMembers(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmFound) Id() int {
	return event.EventId
}

// String returns "realm_found".
func (*RealmFound) String() string {
	return "realm_found"
}

// RealmJoined event.  https://ninchat.com/api/v2#realm_joined
type RealmJoined struct {
	EventId      int                     `json:"event_id,omitempty"`
	RealmAttrs   *RealmAttrs             `json:"realm_attrs"`
	RealmId      string                  `json:"realm_id"`
	RealmMembers map[string]*RealmMember `json:"realm_members"`
}

// NewRealmJoined creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_joined".
func NewRealmJoined(clientEvent *ninchat.Event) (event *RealmJoined, err error) {
	if clientEvent != nil {
		e := new(RealmJoined)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_joined".
func (target *RealmJoined) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_joined" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = NewRealmAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["realm_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmMembers = MakeRealmMembers(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmJoined) Id() int {
	return event.EventId
}

// String returns "realm_joined".
func (*RealmJoined) String() string {
	return "realm_joined"
}

// RealmMemberJoined event.  https://ninchat.com/api/v2#realm_member_joined
type RealmMemberJoined struct {
	EventId     int               `json:"event_id,omitempty"`
	MemberAttrs *RealmMemberAttrs `json:"member_attrs"`
	RealmId     string            `json:"realm_id"`
	UserAttrs   *UserAttrs        `json:"user_attrs"`
	UserId      string            `json:"user_id"`
}

// NewRealmMemberJoined creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_member_joined".
func NewRealmMemberJoined(clientEvent *ninchat.Event) (event *RealmMemberJoined, err error) {
	if clientEvent != nil {
		e := new(RealmMemberJoined)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_member_joined".
func (target *RealmMemberJoined) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_member_joined" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = NewRealmMemberAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmMemberJoined) Id() int {
	return event.EventId
}

// String returns "realm_member_joined".
func (*RealmMemberJoined) String() string {
	return "realm_member_joined"
}

// RealmMemberParted event.  https://ninchat.com/api/v2#realm_member_parted
type RealmMemberParted struct {
	ChannelId *string `json:"channel_id,omitempty"`
	EventId   int     `json:"event_id,omitempty"`
	RealmId   *string `json:"realm_id,omitempty"`
	UserId    string  `json:"user_id"`
}

// NewRealmMemberParted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_member_parted".
func NewRealmMemberParted(clientEvent *ninchat.Event) (event *RealmMemberParted, err error) {
	if clientEvent != nil {
		e := new(RealmMemberParted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_member_parted".
func (target *RealmMemberParted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_member_parted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = &y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmMemberParted) Id() int {
	return event.EventId
}

// String returns "realm_member_parted".
func (*RealmMemberParted) String() string {
	return "realm_member_parted"
}

// RealmMemberUpdated event.  https://ninchat.com/api/v2#realm_member_updated
type RealmMemberUpdated struct {
	EventId     int               `json:"event_id,omitempty"`
	MemberAttrs *RealmMemberAttrs `json:"member_attrs"`
	RealmId     string            `json:"realm_id"`
	UserId      string            `json:"user_id"`
}

// NewRealmMemberUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_member_updated".
func NewRealmMemberUpdated(clientEvent *ninchat.Event) (event *RealmMemberUpdated, err error) {
	if clientEvent != nil {
		e := new(RealmMemberUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_member_updated".
func (target *RealmMemberUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_member_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["member_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.MemberAttrs = NewRealmMemberAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmMemberUpdated) Id() int {
	return event.EventId
}

// String returns "realm_member_updated".
func (*RealmMemberUpdated) String() string {
	return "realm_member_updated"
}

// RealmParted event.  https://ninchat.com/api/v2#realm_parted
type RealmParted struct {
	EventId int    `json:"event_id,omitempty"`
	RealmId string `json:"realm_id"`
}

// NewRealmParted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_parted".
func NewRealmParted(clientEvent *ninchat.Event) (event *RealmParted, err error) {
	if clientEvent != nil {
		e := new(RealmParted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_parted".
func (target *RealmParted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_parted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmParted) Id() int {
	return event.EventId
}

// String returns "realm_parted".
func (*RealmParted) String() string {
	return "realm_parted"
}

// RealmQueuesFound event.  https://ninchat.com/api/v2#realm_queues_found
type RealmQueuesFound struct {
	EventId     int                    `json:"event_id,omitempty"`
	RealmId     string                 `json:"realm_id"`
	RealmQueues map[string]*RealmQueue `json:"realm_queues"`
}

// NewRealmQueuesFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_queues_found".
func NewRealmQueuesFound(clientEvent *ninchat.Event) (event *RealmQueuesFound, err error) {
	if clientEvent != nil {
		e := new(RealmQueuesFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_queues_found".
func (target *RealmQueuesFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_queues_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	if x := source["realm_queues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmQueues = MakeRealmQueues(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmQueuesFound) Id() int {
	return event.EventId
}

// String returns "realm_queues_found".
func (*RealmQueuesFound) String() string {
	return "realm_queues_found"
}

// RealmUpdated event.  https://ninchat.com/api/v2#realm_updated
type RealmUpdated struct {
	EventId    int         `json:"event_id,omitempty"`
	RealmAttrs *RealmAttrs `json:"realm_attrs"`
	RealmId    string      `json:"realm_id"`
}

// NewRealmUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "realm_updated".
func NewRealmUpdated(clientEvent *ninchat.Event) (event *RealmUpdated, err error) {
	if clientEvent != nil {
		e := new(RealmUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "realm_updated".
func (target *RealmUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "realm_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["realm_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.RealmAttrs = NewRealmAttrs(y)
		}
	}

	if x := source["realm_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.RealmId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *RealmUpdated) Id() int {
	return event.EventId
}

// String returns "realm_updated".
func (*RealmUpdated) String() string {
	return "realm_updated"
}

// SearchResults event.  https://ninchat.com/api/v2#search_results
type SearchResults struct {
	Channels map[string]*ChannelResult `json:"channels,omitempty"`
	EventId  int                       `json:"event_id,omitempty"`
	Users    map[string]*UserResult    `json:"users,omitempty"`
}

// NewSearchResults creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "search_results".
func NewSearchResults(clientEvent *ninchat.Event) (event *SearchResults, err error) {
	if clientEvent != nil {
		e := new(SearchResults)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "search_results".
func (target *SearchResults) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "search_results" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channels"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.Channels = MakeChannels(y)
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["users"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.Users = MakeUsers(y)
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *SearchResults) Id() int {
	return event.EventId
}

// String returns "search_results".
func (*SearchResults) String() string {
	return "search_results"
}

// SessionCreated event.  https://ninchat.com/api/v2#session_created
type SessionCreated struct {
	EventId          int                          `json:"event_id,omitempty"`
	SessionHost      *string                      `json:"session_host,omitempty"`
	SessionId        string                       `json:"session_id"`
	UserAccount      *UserAccount                 `json:"user_account"`
	UserAttrs        *UserAttrs                   `json:"user_attrs"`
	UserAuth         *string                      `json:"user_auth,omitempty"`
	UserChannels     map[string]*UserChannel      `json:"user_channels"`
	UserDialogues    map[string]*UserDialogue     `json:"user_dialogues"`
	UserId           string                       `json:"user_id"`
	UserIdentities   map[string]*IdentityAttrs    `json:"user_identities"`
	UserQueues       map[string]*UserQueue        `json:"user_queues,omitempty"`
	UserRealms       map[string]*RealmAttrs       `json:"user_realms"`
	UserRealmsMember map[string]*RealmMemberAttrs `json:"user_realms_member,omitempty"`
	UserSettings     map[string]interface{}       `json:"user_settings"`
}

// NewSessionCreated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "session_created".
func NewSessionCreated(clientEvent *ninchat.Event) (event *SessionCreated, err error) {
	if clientEvent != nil {
		e := new(SessionCreated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "session_created".
func (target *SessionCreated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "session_created" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["session_host"]; x != nil {
		if y, ok := x.(string); ok {
			target.SessionHost = &y
		}
	}

	if x := source["session_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.SessionId = y
		}
	}

	if x := source["user_account"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAccount = NewUserAccount(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_auth"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserAuth = &y
		}
	}

	if x := source["user_channels"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserChannels = MakeUserChannels(y)
		}
	}

	if x := source["user_dialogues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserDialogues = MakeUserDialogues(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	if x := source["user_identities"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserIdentities = MakeUserIdentities(y)
		}
	}

	if x := source["user_queues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserQueues = MakeUserQueues(y)
		}
	}

	if x := source["user_realms"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealms = MakeUserRealms(y)
		}
	}

	if x := source["user_realms_member"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealmsMember = MakeUserRealmsMember(y)
		}
	}

	if x := source["user_settings"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserSettings = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *SessionCreated) Id() int {
	return event.EventId
}

// String returns "session_created".
func (*SessionCreated) String() string {
	return "session_created"
}

// SessionStatusUpdated event.  https://ninchat.com/api/v2#session_status_updated
type SessionStatusUpdated struct {
	ChannelId *string `json:"channel_id,omitempty"`
	EventId   int     `json:"event_id,omitempty"`
	MessageId string  `json:"message_id"`
	UserId    *string `json:"user_id,omitempty"`
}

// NewSessionStatusUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "session_status_updated".
func NewSessionStatusUpdated(clientEvent *ninchat.Event) (event *SessionStatusUpdated, err error) {
	if clientEvent != nil {
		e := new(SessionStatusUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "session_status_updated".
func (target *SessionStatusUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "session_status_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["channel_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.ChannelId = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["message_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.MessageId = y
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = &y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *SessionStatusUpdated) Id() int {
	return event.EventId
}

// String returns "session_status_updated".
func (*SessionStatusUpdated) String() string {
	return "session_status_updated"
}

// UserDeleted event.  https://ninchat.com/api/v2#user_deleted
type UserDeleted struct {
	EventId int    `json:"event_id,omitempty"`
	UserId  string `json:"user_id"`
}

// NewUserDeleted creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "user_deleted".
func NewUserDeleted(clientEvent *ninchat.Event) (event *UserDeleted, err error) {
	if clientEvent != nil {
		e := new(UserDeleted)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "user_deleted".
func (target *UserDeleted) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "user_deleted" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *UserDeleted) Id() int {
	return event.EventId
}

// String returns "user_deleted".
func (*UserDeleted) String() string {
	return "user_deleted"
}

// UserFound event.  https://ninchat.com/api/v2#user_found
type UserFound struct {
	AudienceMetadata map[string]string               `json:"audience_metadata,omitempty"`
	DialogueMembers  map[string]*DialogueMemberAttrs `json:"dialogue_members,omitempty"`
	DialogueStatus   *string                         `json:"dialogue_status,omitempty"`
	EventId          int                             `json:"event_id,omitempty"`
	UserAccount      *UserAccount                    `json:"user_account,omitempty"`
	UserAttrs        *UserAttrs                      `json:"user_attrs"`
	UserChannels     map[string]*UserChannel         `json:"user_channels,omitempty"`
	UserDialogues    map[string]*UserDialogue        `json:"user_dialogues,omitempty"`
	UserId           string                          `json:"user_id"`
	UserIdentities   map[string]*IdentityAttrs       `json:"user_identities"`
	UserQueues       map[string]*UserQueue           `json:"user_queues,omitempty"`
	UserRealms       map[string]*RealmAttrs          `json:"user_realms,omitempty"`
	UserRealmsMember map[string]*RealmMemberAttrs    `json:"user_realms_member,omitempty"`
	UserSettings     map[string]interface{}          `json:"user_settings,omitempty"`
}

// NewUserFound creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "user_found".
func NewUserFound(clientEvent *ninchat.Event) (event *UserFound, err error) {
	if clientEvent != nil {
		e := new(UserFound)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "user_found".
func (target *UserFound) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "user_found" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["audience_metadata"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.AudienceMetadata = MakeStrings(y)
		}
	}

	if x := source["dialogue_members"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.DialogueMembers = MakeDialogueMembers(y)
		}
	}

	if x := source["dialogue_status"]; x != nil {
		if y, ok := x.(string); ok {
			target.DialogueStatus = &y
		}
	}

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["user_account"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAccount = NewUserAccount(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_channels"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserChannels = MakeUserChannels(y)
		}
	}

	if x := source["user_dialogues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserDialogues = MakeUserDialogues(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	if x := source["user_identities"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserIdentities = MakeUserIdentities(y)
		}
	}

	if x := source["user_queues"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserQueues = MakeUserQueues(y)
		}
	}

	if x := source["user_realms"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealms = MakeUserRealms(y)
		}
	}

	if x := source["user_realms_member"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserRealmsMember = MakeUserRealmsMember(y)
		}
	}

	if x := source["user_settings"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserSettings = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *UserFound) Id() int {
	return event.EventId
}

// String returns "user_found".
func (*UserFound) String() string {
	return "user_found"
}

// UserUpdated event.  https://ninchat.com/api/v2#user_updated
type UserUpdated struct {
	EventId      int                    `json:"event_id,omitempty"`
	UserAccount  *UserAccount           `json:"user_account,omitempty"`
	UserAttrs    *UserAttrs             `json:"user_attrs"`
	UserId       string                 `json:"user_id"`
	UserSettings map[string]interface{} `json:"user_settings,omitempty"`
}

// NewUserUpdated creates an event object with the parameters specified by the clientEvent.
// An UnexpectedEventError is returned if its type is not "user_updated".
func NewUserUpdated(clientEvent *ninchat.Event) (event *UserUpdated, err error) {
	if clientEvent != nil {
		e := new(UserUpdated)
		if err = e.Init(clientEvent); err == nil {
			event = e
		}
	}
	return
}

// Init fills in the parameters specified by the clientEvent
// (other fields are not touched).
// An UnexpectedEventError is returned if its type is not "user_updated".
func (target *UserUpdated) Init(clientEvent *ninchat.Event) error {
	if clientEvent.String() != "user_updated" {
		return &UnexpectedEventError{clientEvent}
	}

	source := clientEvent.Params

	if x := source["event_id"]; x != nil {
		if y, ok := x.(float64); ok {
			target.EventId = int(y)
		}
	}

	if x := source["user_account"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAccount = NewUserAccount(y)
		}
	}

	if x := source["user_attrs"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserAttrs = NewUserAttrs(y)
		}
	}

	if x := source["user_id"]; x != nil {
		if y, ok := x.(string); ok {
			target.UserId = y
		}
	}

	if x := source["user_settings"]; x != nil {
		if y, ok := x.(map[string]interface{}); ok {
			target.UserSettings = y
		}
	}

	return nil
}

// Id returns the EventId parameter.
func (event *UserUpdated) Id() int {
	return event.EventId
}

// String returns "user_updated".
func (*UserUpdated) String() string {
	return "user_updated"
}
