package ninchatapi

// THIS FILE IS AUTO-GENERATED BY generate.py - DO NOT EDIT BY HAND!

// EventFactories contains default constructors for all known event types.
var EventFactories = map[string]func() Event{
	"access_created":            func() Event { return new(AccessCreated) },
	"access_found":              func() Event { return new(AccessFound) },
	"ack":                       func() Event { return new(Ack) },
	"audience_enqueued":         func() Event { return new(AudienceEnqueued) },
	"channel_deleted":           func() Event { return new(ChannelDeleted) },
	"channel_found":             func() Event { return new(ChannelFound) },
	"channel_joined":            func() Event { return new(ChannelJoined) },
	"channel_member_joined":     func() Event { return new(ChannelMemberJoined) },
	"channel_member_parted":     func() Event { return new(ChannelMemberParted) },
	"channel_member_updated":    func() Event { return new(ChannelMemberUpdated) },
	"channel_parted":            func() Event { return new(ChannelParted) },
	"channel_updated":           func() Event { return new(ChannelUpdated) },
	"dialogue_updated":          func() Event { return new(DialogueUpdated) },
	"error":                     func() Event { return new(Error) },
	"history_discarded":         func() Event { return new(HistoryDiscarded) },
	"history_results":           func() Event { return new(HistoryResults) },
	"identity_created":          func() Event { return new(IdentityCreated) },
	"identity_deleted":          func() Event { return new(IdentityDeleted) },
	"identity_found":            func() Event { return new(IdentityFound) },
	"identity_updated":          func() Event { return new(IdentityUpdated) },
	"master_key_created":        func() Event { return new(MasterKeyCreated) },
	"master_key_deleted":        func() Event { return new(MasterKeyDeleted) },
	"master_keys_found":         func() Event { return new(MasterKeysFound) },
	"message_received":          func() Event { return new(MessageReceived) },
	"message_updated":           func() Event { return new(MessageUpdated) },
	"pong":                      func() Event { return new(Pong) },
	"queue_created":             func() Event { return new(QueueCreated) },
	"queue_deleted":             func() Event { return new(QueueDeleted) },
	"queue_found":               func() Event { return new(QueueFound) },
	"queue_joined":              func() Event { return new(QueueJoined) },
	"queue_member_joined":       func() Event { return new(QueueMemberJoined) },
	"queue_member_parted":       func() Event { return new(QueueMemberParted) },
	"queue_parted":              func() Event { return new(QueueParted) },
	"queue_stats_contents":      func() Event { return new(QueueStatsContents) },
	"queue_transcripts_deleted": func() Event { return new(QueueTranscriptsDeleted) },
	"queue_transcripts_found":   func() Event { return new(QueueTranscriptsFound) },
	"queue_updated":             func() Event { return new(QueueUpdated) },
	"realm_deleted":             func() Event { return new(RealmDeleted) },
	"realm_found":               func() Event { return new(RealmFound) },
	"realm_joined":              func() Event { return new(RealmJoined) },
	"realm_member_joined":       func() Event { return new(RealmMemberJoined) },
	"realm_member_parted":       func() Event { return new(RealmMemberParted) },
	"realm_member_updated":      func() Event { return new(RealmMemberUpdated) },
	"realm_parted":              func() Event { return new(RealmParted) },
	"realm_queues_found":        func() Event { return new(RealmQueuesFound) },
	"realm_updated":             func() Event { return new(RealmUpdated) },
	"search_results":            func() Event { return new(SearchResults) },
	"session_created":           func() Event { return new(SessionCreated) },
	"session_status_updated":    func() Event { return new(SessionStatusUpdated) },
	"tag_created":               func() Event { return new(TagCreated) },
	"tag_deleted":               func() Event { return new(TagDeleted) },
	"tag_found":                 func() Event { return new(TagFound) },
	"tag_updated":               func() Event { return new(TagUpdated) },
	"tags_found":                func() Event { return new(TagsFound) },
	"transcript_contents":       func() Event { return new(TranscriptContents) },
	"transcript_deleted":        func() Event { return new(TranscriptDeleted) },
	"user_created":              func() Event { return new(UserCreated) },
	"user_deleted":              func() Event { return new(UserDeleted) },
	"user_found":                func() Event { return new(UserFound) },
	"user_updated":              func() Event { return new(UserUpdated) },
}
